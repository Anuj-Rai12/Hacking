Index: app/src/main/java/com/uptodd/uptoddapp/media/music/MusicFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.media.music\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.LinearLayout\r\nimport android.widget.PopupMenu\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.squareup.picasso.Picasso\r\nimport com.uptodd.uptoddapp.R\r\nimport com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification\r\nimport com.uptodd.uptoddapp.database.media.music.MusicCategory\r\nimport com.uptodd.uptoddapp.databinding.MusicFragmentBinding\r\nimport com.uptodd.uptoddapp.media.player.BackgroundPlayer\r\nimport com.uptodd.uptoddapp.media.player.MediaStopReceiver\r\nimport com.uptodd.uptoddapp.utilities.Conversion\r\nimport com.uptodd.uptoddapp.utilities.UpToddMediaPlayer\r\n\r\n\r\nclass MusicFragment : Fragment() {\r\n\r\n    private lateinit var viewModel: MusicViewModel\r\n    private lateinit var appContext: Context\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val binding: MusicFragmentBinding = DataBindingUtil.inflate(\r\n            inflater,\r\n            R.layout.music_fragment,\r\n            container,\r\n            false\r\n        )\r\n\r\n        binding.lifecycleOwner = this\r\n        viewModel = ViewModelProvider(this).get(MusicViewModel::class.java)\r\n        binding.musicViewModel = viewModel\r\n\r\n        setTimer(binding)\r\n\r\n//        requireActivity().findViewById<BottomNavigationView>(R.id.bottom_navigation).visibility = View.GONE\r\n\r\n\r\n        if(!UpToddMediaPlayer.isPlaying){\r\n            binding.musicPlayerLayout.visibility = View.GONE\r\n        }\r\n\r\n        initializeObservers(binding)\r\n\r\n        return binding.root\r\n    }\r\n\r\n\r\n    private fun setTimer(binding: MusicFragmentBinding) {\r\n\r\n        val dropDownMenu = PopupMenu(requireContext(), binding.musicTimer)\r\n        val menu = dropDownMenu.menu\r\n        menu.add(0,0,0,\"15m\")\r\n        menu.add(0,1,0,\"30m\")\r\n        menu.add(0,2,0,\"45m\")\r\n\r\n        dropDownMenu.setOnMenuItemClickListener{\r\n            when(it.itemId){\r\n                0 -> {\r\n                    if (UpToddMediaPlayer.isPlaying) {\r\n                        UpToddMediaPlayer.timer = System.currentTimeMillis() + (15 * 60 * 1000)\r\n                        UptoddNotification.setAlarm(requireContext(), UpToddMediaPlayer.timer!!, 100, false, MediaStopReceiver::class.java\r\n                        )\r\n                        Snackbar.make(\r\n                            requireView(),\r\n                            \"Timer set for 15 minutes.\",\r\n                            Snackbar.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                    true\r\n                }\r\n                1 -> {\r\n                    if (UpToddMediaPlayer.isPlaying) {\r\n                        UpToddMediaPlayer.timer = System.currentTimeMillis() + (30 * 60 * 1000)\r\n                        UptoddNotification.setAlarm(requireContext(), UpToddMediaPlayer.timer!!, 100, false, MediaStopReceiver::class.java\r\n                        )\r\n                        Snackbar.make(\r\n                            requireView(),\r\n                            \"Timer set for 30 minutes.\",\r\n                            Snackbar.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                    true\r\n                }\r\n                2 -> {\r\n                    if (UpToddMediaPlayer.isPlaying) {\r\n                        UpToddMediaPlayer.timer = System.currentTimeMillis() + (45 * 60 * 1000)\r\n                        UptoddNotification.setAlarm(requireContext(), UpToddMediaPlayer.timer!!, 100, false, MediaStopReceiver::class.java\r\n                        )\r\n                        Snackbar.make(\r\n                            requireView(),\r\n                            \"Timer set for 45 minutes.\",\r\n                            Snackbar.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                    true\r\n                }\r\n                else -> false\r\n            }\r\n        }\r\n\r\n        binding.musicTimer.setOnClickListener {\r\n            //If timer is not set already\r\n            if(UpToddMediaPlayer.timer==null) {\r\n                dropDownMenu.show()\r\n            }\r\n            //Else cancel the timer\r\n            else{\r\n                UptoddNotification.cancelAlarm(requireContext(), 100, MediaStopReceiver::class.java)\r\n                UpToddMediaPlayer.timer = null\r\n                Snackbar.make(requireView(), \"Timer cancelled!\", Snackbar.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun initializeObservers(binding: MusicFragmentBinding) {\r\n\r\n        viewModel.musicCategories.observe(viewLifecycleOwner, {\r\n            redrawList(binding.musicList, it, binding)\r\n        })\r\n\r\n\r\n\r\n        viewModel.isPlaying.observe(viewLifecycleOwner, {\r\n            if (it) {\r\n                binding.musicPlay.setImageResource(R.drawable.material_pause)\r\n                Picasso.get()\r\n                    .load(viewModel.image.value)\r\n                    .resize(Conversion.convertDpToPixel(64F,requireContext()), Conversion.convertDpToPixel(64F,requireContext()))\r\n                    .into(binding.musicIcon)\r\n                binding.musicTitle.text = viewModel.title.value\r\n            } else {\r\n                binding.musicPlay.setImageResource(R.drawable.material_play)\r\n            }\r\n        })\r\n    }\r\n\r\n    @SuppressLint(\"InflateParams\")\r\n    private fun redrawList(\r\n        musicList: LinearLayout,\r\n        list: ArrayList<MusicCategory>,\r\n        binding: MusicFragmentBinding\r\n    ) {\r\n        musicList.removeAllViews()\r\n        list.forEach {\r\n            val inflater = requireContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\r\n            val v = inflater.inflate(R.layout.music_list_item, null)\r\n            val musicCategoryTitle: TextView = v.findViewById(R.id.music_item_category_name)\r\n            val musicCategoryList: LinearLayout = v.findViewById(R.id.music_item_layout)\r\n\r\n            musicCategoryTitle.text = it.categoryName\r\n\r\n            //for each category, add its music files\r\n            it.categoryFiles.forEach { music->\r\n                val newImageView = ImageView(requireContext())\r\n                newImageView.setPadding(10, 5, 10, 5)\r\n                newImageView.scaleType = ImageView.ScaleType.FIT_XY\r\n                Picasso.get()\r\n                    .load(music.imageURL)\r\n                    .resize(Conversion.convertDpToPixel(128F,requireContext()), Conversion.convertDpToPixel(128F,requireContext()))\r\n                    .into(newImageView)\r\n\r\n                newImageView.setOnClickListener { _ ->\r\n                    viewModel.playFile(music, it)\r\n                    binding.musicTitle.text = music.title\r\n                    binding.musicPlayerLayout.visibility = View.VISIBLE\r\n                    //if time is already set and the user changes music, cancel the timer\r\n                    if(UpToddMediaPlayer.timer!=null)\r\n                        binding.musicTimer.performClick()\r\n                }\r\n                newImageView.setOnLongClickListener { _ ->\r\n                    findNavController().navigate(\r\n                        MusicFragmentDirections.actionMusicToDetails(\r\n                            \"Music\",\r\n                            music.musicId\r\n                        )\r\n                    )\r\n                    true\r\n                }\r\n                musicCategoryList.addView(newImageView)\r\n            }\r\n\r\n            musicList.addView(v)\r\n\r\n        }\r\n    }\r\n\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        appContext=context\r\n    }\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        viewModel = ViewModelProvider(this).get(MusicViewModel::class.java)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        val intent = Intent(requireContext(), BackgroundPlayer::class.java)\r\n        intent.putExtra(\"toRun\", true)\r\n        intent.putExtra(\"musicType\", \"music\")\r\n        requireContext().sendBroadcast(intent)\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        val supportActionBar = (requireActivity() as AppCompatActivity).supportActionBar!!\r\n        supportActionBar.setHomeButtonEnabled(true);\r\n        supportActionBar.setDisplayHomeAsUpEnabled(true);\r\n        val intent = Intent(requireContext(), BackgroundPlayer::class.java)\r\n        intent.putExtra(\"toRun\", false)\r\n        intent.putExtra(\"musicType\", \"music\")\r\n        requireContext().sendBroadcast(intent)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/media/music/MusicFragment.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/media/music/MusicFragment.kt	(date 1606805232743)
@@ -19,7 +19,7 @@
 import com.google.android.material.snackbar.Snackbar
 import com.squareup.picasso.Picasso
 import com.uptodd.uptoddapp.R
-import com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification
+import com.uptodd.uptoddapp.alarmsAndNotifications.UptoddNotification
 import com.uptodd.uptoddapp.database.media.music.MusicCategory
 import com.uptodd.uptoddapp.databinding.MusicFragmentBinding
 import com.uptodd.uptoddapp.media.player.BackgroundPlayer
Index: app/src/main/java/com/uptodd/uptoddapp/ui/order/orderlist/OrderViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.ui.order.orderlist\r\n\r\nimport android.os.AsyncTask\r\nimport android.util.Log\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport com.androidnetworking.AndroidNetworking\r\nimport com.androidnetworking.common.Priority\r\nimport com.androidnetworking.error.ANError\r\nimport com.androidnetworking.interfaces.JSONObjectRequestListener\r\nimport com.uptodd.uptoddapp.database.order.Order\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\n\r\nclass OrderViewModel:ViewModel()\r\n{\r\n\r\n\r\n    val order1= Order(1,\"111-222-333-444\",1,\"MyProduct\",2,true,\r\n        \"05022020\",\"http://www.pdf995.com/samples/pdf.pdf\")\r\n    val order2= Order(2,\"111-222-333-444\",2,\"Good product\",1,false,\r\n        \"05032020\",\"http://www.pdf995.com/samples/pdf.pdf\")\r\n    val order3= Order(3,\"111-222-333-444\",1,\"MyProduct\",2,true,\r\n        \"05102020\",\"http://www.pdf995.com/samples/pdf.pdf\")\r\n    val order4= Order(4,\"111-222-333-444\",1,\"MyProduct\",2,true,\r\n        \"05122020\",\"http://www.pdf995.com/samples/pdf.pdf\")\r\n\r\n    private var _allOrderList=MutableLiveData<List<Order>>()\r\n    val allOrderList: LiveData<List<Order>>\r\n        get() = _allOrderList\r\n\r\n    var isLoadingDialogVisible=MutableLiveData<Boolean>()\r\n\r\n    var userId:String=\"\"\r\n\r\n    init {\r\n        //getOrdersFromDatabase()\r\n    }\r\n\r\n    fun getOrdersFromDatabase() {\r\n        AndroidNetworking.get(\"https://uptodd.com/api/appusers/products/{userId}\")\r\n            .addPathParameter(\"userId\",\"1\")                                             //TODO replace 1 by userId\r\n            .setPriority(Priority.HIGH)\r\n            .build()\r\n            .getAsJSONObject(object : JSONObjectRequestListener {\r\n                override fun onResponse(response: JSONObject?) {\r\n                    if (response != null) {\r\n                        Log.d(\"div\", \"OrderViewModel L47 ${response.get(\"status\")} -> ${\r\n                            response.get(\r\n                                \"data\")\r\n                        }\")\r\n\r\n                        var cardsListData = response.get(\"data\") as JSONArray\r\n                        val list = ArrayList<Order>()\r\n                        var i = 0\r\n                        while (i < cardsListData.length()) {\r\n                            val obj = cardsListData.get(i) as JSONObject\r\n                            if(obj.getBoolean(\"deliveryStatus\")) {\r\n                                list.add(Order(obj.getLong(\"id\"),\r\n                                    obj.getLong(\"orderNo\").toString(),\r\n                                    obj.getLong(\"monthNo\"),\r\n                                    obj.getString(\"productName\"),\r\n                                    obj.getLong(\"quantity\"),\r\n                                    obj.getBoolean(\"deliveryStatus\"),\r\n                                    obj.getString(\"deliveryDate\"),\r\n                                    obj.getString(\"detailsPdfUrl\")))\r\n                            }\r\n                            else\r\n                            {\r\n                                list.add(Order(obj.getLong(\"id\"),\r\n                                    obj.getLong(\"orderNo\").toString(),\r\n                                    obj.getLong(\"monthNo\"),\r\n                                    obj.getString(\"productName\"),\r\n                                    obj.getLong(\"quantity\"),\r\n                                    obj.getBoolean(\"deliveryStatus\"),\r\n                                    obj.getString(\"deliveryExpectedDate\"),\r\n                                    obj.getString(\"detailsPdfUrl\")))\r\n                            }\r\n                            Log.d(\"div\", \"OrderViewModel L78 ${list.get(i)}\")\r\n                            i++\r\n                        }\r\n                        _allOrderList.value=list\r\n                        isLoadingDialogVisible.value=false\r\n                    }\r\n                }\r\n\r\n                override fun onError(anError: ANError?) {\r\n                    Log.d(\"div\",\r\n                        \"OrderViewModel L86 API error: ${anError?.response} --- ${anError?.errorCode} --- ${anError?.errorBody} --- ${anError?.errorDetail} \"\r\n                    )\r\n\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    var isExtendSubscriptionRequestMade:Boolean=false\r\n    fun requestExtendSubscription() {\r\n\r\n        AndroidNetworking.post(\"https://uptodd.com/api/appusers/products/{userId}\")\r\n            .addPathParameter(\"userId\",userId)\r\n            .setPriority(Priority.MEDIUM)\r\n            .build()\r\n            .getAsJSONObject(object : JSONObjectRequestListener {\r\n                override fun onResponse(response: JSONObject?) {\r\n                    Log.d(\"div\", \"OrderViewModel L63 ${response?.get(\"status\")}\")\r\n                    if (response != null && response.get(\"status\") == \"Success\") {\r\n                        Log.d(\"div\", \"OrderViewModel L65 ${response.get(\"status\")}\")\r\n                        if(response.get(\"status\")==\"Success\")\r\n                            isExtendSubscriptionRequestMade=true\r\n                        isLoadingDialogVisible.value = false\r\n\r\n                    }\r\n                }\r\n\r\n                override fun onError(error: ANError?) {\r\n                    isLoadingDialogVisible.value=false\r\n                    Log.d(\"div\", \"OrderViewModel L67 ${error}\")\r\n                    if (error!!.getErrorCode() != 0) {\r\n                        Log.d(\"div\", \"onError errorCode : \" + error.getErrorCode());\r\n                        Log.d(\"div\", \"onError errorBody : \" + error.getErrorBody());\r\n                        Log.d(\"div\", \"onError errorDetail : \" + error.getErrorDetail());\r\n                    } else {\r\n                        // error.getErrorDetail() : connectionError, parseError, requestCancelledError\r\n                        Log.d(\"div\", \"onError errorDetail : \" + error.getErrorDetail());\r\n                    }\r\n                }\r\n\r\n            })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/ui/order/orderlist/OrderViewModel.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/ui/order/orderlist/OrderViewModel.kt	(date 1606805234743)
@@ -18,13 +18,13 @@
 
 
     val order1= Order(1,"111-222-333-444",1,"MyProduct",2,true,
-        "05022020","http://www.pdf995.com/samples/pdf.pdf")
+        "05022020","https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf")
     val order2= Order(2,"111-222-333-444",2,"Good product",1,false,
-        "05032020","http://www.pdf995.com/samples/pdf.pdf")
+        "05032020","https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf")
     val order3= Order(3,"111-222-333-444",1,"MyProduct",2,true,
-        "05102020","http://www.pdf995.com/samples/pdf.pdf")
+        "05102020","https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf")
     val order4= Order(4,"111-222-333-444",1,"MyProduct",2,true,
-        "05122020","http://www.pdf995.com/samples/pdf.pdf")
+        "05122020","https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf")
 
     private var _allOrderList=MutableLiveData<List<Order>>()
     val allOrderList: LiveData<List<Order>>
Index: app/src/main/java/com/uptodd/uptoddapp/media/player/BackgroundPlayer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.media.player\r\n\r\nimport android.app.PendingIntent\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport com.uptodd.uptoddapp.R\r\nimport com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification\r\nimport com.uptodd.uptoddapp.media.MusicPlayer\r\nimport com.uptodd.uptoddapp.media.PoemActivity\r\nimport com.uptodd.uptoddapp.utilities.UpToddMediaPlayer\r\n\r\nclass BackgroundPlayer : BroadcastReceiver(){\r\n    override fun onReceive(context: Context?, intent: Intent?) {\r\n        val toRun = intent?.extras?.getBoolean(\"toRun\")!!\r\n        //if activity is in background\r\n        if(toRun) {\r\n            val stopIntent = Intent(context, MediaStopReceiver::class.java)\r\n            stopIntent.putExtra(\"NotificationID\", 150)\r\n            val stopPendingIntent = PendingIntent.getBroadcast(context, 0, stopIntent, 0)\r\n            var notificationIntent: Intent? = null\r\n            if(intent.extras!!.getString(\"musicType\") == \"music\")\r\n                notificationIntent = Intent(context, MusicPlayer::class.java)\r\n            else\r\n                notificationIntent = Intent(context, PoemActivity::class.java)\r\n            val notificationBuilder = UptoddNotification.mediaNotificationBuilder(\r\n                context!!,\r\n                \"UpTodd\",\r\n                \"Playing media in background...\",\r\n                notificationIntent,\r\n                \"notification.music_player\"\r\n            )\r\n            if (UpToddMediaPlayer.isPlaying) {\r\n                notificationBuilder.addAction(R.drawable.material_pause, \"Stop\", stopPendingIntent)\r\n                UptoddNotification.notify(context, notificationBuilder, 150)\r\n            }\r\n        }\r\n        //when activity is resumed, dismiss the notification\r\n        else{\r\n            UptoddNotification.dismiss(context!!, 150)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/media/player/BackgroundPlayer.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/media/player/BackgroundPlayer.kt	(date 1606805232743)
@@ -5,7 +5,7 @@
 import android.content.Context
 import android.content.Intent
 import com.uptodd.uptoddapp.R
-import com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification
+import com.uptodd.uptoddapp.alarmsAndNotifications.UptoddNotification
 import com.uptodd.uptoddapp.media.MusicPlayer
 import com.uptodd.uptoddapp.media.PoemActivity
 import com.uptodd.uptoddapp.utilities.UpToddMediaPlayer
Index: app/src/main/java/com/uptodd/uptoddapp/media/player/MediaStopReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.media.player\r\n\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification\r\nimport com.uptodd.uptoddapp.utilities.UpToddMediaPlayer\r\n\r\nclass MediaStopReceiver : BroadcastReceiver(){\r\n    override fun onReceive(context: Context?, intent: Intent?) {\r\n        if(intent!=null) {\r\n            if(intent.extras!=null) {\r\n                UpToddMediaPlayer.timer = null\r\n                val notificationID = intent.extras!!.getInt(\"NotificationID\", 150)\r\n                val upToddMediaPlayer = UpToddMediaPlayer()\r\n                upToddMediaPlayer.stop()\r\n                UptoddNotification.dismiss(context!!, notificationID)\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/media/player/MediaStopReceiver.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/media/player/MediaStopReceiver.kt	(date 1606805232743)
@@ -3,7 +3,7 @@
 import android.content.BroadcastReceiver
 import android.content.Context
 import android.content.Intent
-import com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification
+import com.uptodd.uptoddapp.alarmsAndNotifications.UptoddNotification
 import com.uptodd.uptoddapp.utilities.UpToddMediaPlayer
 
 class MediaStopReceiver : BroadcastReceiver(){
Index: app/src/main/res/menu/todos_drawer.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    tools:showIn=\"navigation_view\">\r\n\r\n    <group android:checkableBehavior=\"single\">\r\n        <item\r\n            android:id=\"@+id/homePageFragment\"\r\n            android:icon=\"@drawable/material_home\"\r\n            android:title=\"@string/menu_home\" />\r\n        <item\r\n            android:id=\"@+id/music\"\r\n            android:icon=\"@drawable/ic_menu_slideshow\"\r\n            android:title=\"@string/music\" />\r\n        <item\r\n            android:id=\"@+id/poemFragment\"\r\n            android:icon=\"@drawable/ic_menu_slideshow\"\r\n            android:title=\"@string/poem\" />\r\n        <item\r\n            android:id=\"@+id/toysFragment\"\r\n            android:icon=\"@drawable/ic_menu_slideshow\"\r\n            android:title=\"@string/toys\" />\r\n        <item\r\n            android:id=\"@+id/coloursFragment\"\r\n            android:icon=\"@drawable/ic_menu_slideshow\"\r\n            android:title=\"@string/colours\" />\r\n        <item\r\n            android:id=\"@+id/storiesFragment\"\r\n            android:icon=\"@drawable/ic_menu_slideshow\"\r\n            android:title=\"@string/stories\" />\r\n        <item\r\n            android:id=\"@+id/yogaFragment\"\r\n            android:icon=\"@drawable/ic_menu_slideshow\"\r\n            android:title=\"@string/yoga\" />\r\n        <item\r\n            android:id=\"@+id/expectedOutcomesFragment\"\r\n            android:icon=\"@drawable/ic_menu_slideshow\"\r\n            android:title=\"@string/expected_outcomes\"/>\r\n\r\n    </group>\r\n    <group android:checkableBehavior=\"single\">\r\n        <item\r\n            android:id=\"@+id/captureImageFragment\"\r\n            android:icon=\"@drawable/ic_menu_camera\"\r\n            android:title=\"@string/capture_moment\" />\r\n        <item\r\n            android:id=\"@+id/orderListFragment\"\r\n            android:icon=\"@drawable/material_shopping_cart\"\r\n            android:title=\"@string/orders\" />\r\n        <item\r\n            android:id=\"@+id/referFragment\"\r\n            android:icon=\"@drawable/refer\"\r\n            android:title=\"@string/refer\" />\r\n        <item\r\n            android:id=\"@+id/allTicketsFragment\"\r\n            android:icon=\"@drawable/material_account_round\"\r\n            android:title=\"@string/support\" />\r\n        <item\r\n            android:id=\"@+id/accountFragment2\"\r\n            android:icon=\"@drawable/material_account_round\"\r\n            android:title=\"@string/account\" />\r\n    </group>\r\n\r\n\r\n\r\n</menu>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/todos_drawer.xml	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/res/menu/todos_drawer.xml	(date 1606805234649)
@@ -3,11 +3,17 @@
     xmlns:tools="http://schemas.android.com/tools"
     tools:showIn="navigation_view">
 
-    <group android:checkableBehavior="single">
+    <group
+        android:id="@+id/main_drawer_home"
+        android:checkableBehavior="single">
         <item
             android:id="@+id/homePageFragment"
             android:icon="@drawable/material_home"
             android:title="@string/menu_home" />
+    </group>
+    <group
+        android:id="@+id/main_drawer_public"
+        android:checkableBehavior="single">
         <item
             android:id="@+id/music"
             android:icon="@drawable/ic_menu_slideshow"
@@ -38,7 +44,9 @@
             android:title="@string/expected_outcomes"/>
 
     </group>
-    <group android:checkableBehavior="single">
+    <group
+        android:id="@+id/main_drawer_others"
+        android:checkableBehavior="single">
         <item
             android:id="@+id/captureImageFragment"
             android:icon="@drawable/ic_menu_camera"
Index: app/src/main/java/com/uptodd/uptoddapp/ui/refer/referlist/ReferListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.ui.refer.referlist\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.DatePickerDialog\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.view.*\r\nimport android.widget.Button\r\nimport androidx.fragment.app.Fragment\r\nimport android.widget.CheckBox\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.uptodd.uptoddapp.R\r\nimport com.uptodd.uptoddapp.ReferActivity\r\nimport com.uptodd.uptoddapp.database.refer.ReferUser\r\nimport com.uptodd.uptoddapp.database.referrals.ReferredListItem\r\nimport com.uptodd.uptoddapp.database.referrals.ReferredListItemPatient\r\nimport com.uptodd.uptoddapp.databinding.FragmentReferListBinding\r\nimport com.uptodd.uptoddapp.doctor.refer.referrals.doctor.ReferredDoctorsListArgs\r\nimport com.uptodd.uptoddapp.utilities.UpToddDialogs\r\n//import com.uptodd.uptoddapp.databinding.ReferralFiltersBinding\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\nimport kotlin.collections.HashMap\r\n\r\n\r\nclass ReferListFragment : Fragment() {\r\n\r\n    private var hashMap = HashMap<String, String>()\r\n\r\n    private var startDateSelected: Long? = null\r\n    private var endDateSelected: Long? = null\r\n\r\n    private lateinit var binding: FragmentReferListBinding\r\n    private lateinit var viewModel: ReferListViewModel\r\n\r\n    private lateinit var uptoddDialogs: UpToddDialogs\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        uptoddDialogs = UpToddDialogs(requireContext())\r\n\r\n\r\n        binding= DataBindingUtil.inflate(layoutInflater,R.layout.fragment_refer_list,container,false)\r\n        binding.lifecycleOwner=this\r\n\r\n        viewModel= ViewModelProvider(this).get(ReferListViewModel::class.java)\r\n\r\n        (activity as AppCompatActivity?)?.supportActionBar?.title=\"Referrals\"\r\n        (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);\r\n        setHasOptionsMenu(true)\r\n\r\n        viewModel.referredList.observe(viewLifecycleOwner, Observer {\r\n            if(it!=null)\r\n            updateList(it)\r\n        })\r\n\r\n        initializeObservers()\r\n\r\n        setClickListeners()\r\n\r\n\r\n        return binding.root\r\n\r\n    }\r\n\r\n    private fun initializeObservers() {\r\n        viewModel.referredList.observe(viewLifecycleOwner, {\r\n            if (it != null)\r\n                updateList(it)\r\n        })\r\n\r\n        viewModel.isLoading.observe(viewLifecycleOwner, {\r\n            it.let{\r\n                when(it){\r\n                    0 -> {\r\n                        uptoddDialogs.dismissDialog()\r\n                        viewModel.loadFullList()\r\n                    }\r\n                    1 -> {\r\n                        uptoddDialogs.showLoadingDialog(findNavController())\r\n                    }\r\n                    10 ->{\r\n                        uptoddDialogs.dismissDialog()\r\n                        uptoddDialogs.showDialog(R.drawable.gif_done, \"Thank you for your feedback.\", \"Close\", object: UpToddDialogs.UpToddDialogListener{\r\n                            override fun onDialogButtonClicked(dialog: Dialog) {\r\n                                uptoddDialogs.dismissDialog()\r\n                            }\r\n                        })\r\n                    }\r\n                    11 -> {\r\n                        uptoddDialogs.showUploadDialog()\r\n                    }\r\n                    else -> {\r\n                        uptoddDialogs.dismissDialog()\r\n                        uptoddDialogs.showDialog(R.drawable.gif_gift, \"An error has occurred: ${viewModel.apiError}\", \"OK\", object: UpToddDialogs.UpToddDialogListener{\r\n                            override fun onDialogButtonClicked(dialog: Dialog) {\r\n                                uptoddDialogs.dismissDialog()\r\n                                findNavController().navigateUp()\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setClickListeners() {\r\n        binding.imageButtonSearch.setOnClickListener {\r\n            applyFiltersAndLoadData()\r\n        }\r\n        binding.imageButtonFilter.setOnClickListener{\r\n            showFilterDialog()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun showFilterDialog() {\r\n        val dialog = Dialog(requireContext())\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        dialog.setContentView(R.layout.referral_filters)\r\n        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n\r\n        val statusSuccessful = dialog.findViewById<CheckBox>(R.id.referral_filters_status_successful)\r\n        val statusPending = dialog.findViewById<CheckBox>(R.id.referral_filters_status_pending)\r\n        val statusFailed = dialog.findViewById<CheckBox>(R.id.referral_filters_status_failed)\r\n        val startDateText = dialog.findViewById<TextView>(R.id.referral_filters_date_start)\r\n        val endDateText = dialog.findViewById<TextView>(R.id.referral_filters_date_end)\r\n        val clearDate = dialog.findViewById<TextView>(R.id.referral_filters_clear_date)\r\n\r\n\r\n        val now = Calendar.getInstance()\r\n        val selected = Calendar.getInstance()\r\n\r\n        val startDatePickerListener = DatePickerDialog.OnDateSetListener { _, year, month, dayOfMonth ->\r\n            selected.set(year , month, dayOfMonth,0 ,0)\r\n            startDateSelected = selected.timeInMillis\r\n            startDateText.text = \"$dayOfMonth/${month+1}/$year\"\r\n        }\r\n\r\n        val endDatePickerListener = DatePickerDialog.OnDateSetListener { _, year, month, dayOfMonth ->\r\n            selected.set(year , month, dayOfMonth,23 ,59)\r\n            endDateSelected = selected.timeInMillis\r\n            endDateText.text = \"$dayOfMonth/${month+1}/$year\"\r\n        }\r\n\r\n        if(startDateSelected!=null){\r\n            selected.timeInMillis = startDateSelected!!\r\n            startDateText.text = \"${selected.get(Calendar.DAY_OF_MONTH)}/${selected.get(Calendar.MONTH)+1}/${selected.get(Calendar.YEAR)}\"\r\n        }\r\n        if(endDateSelected!=null){\r\n            selected.timeInMillis = endDateSelected!!\r\n            endDateText.text = \"${selected.get(Calendar.DAY_OF_MONTH)}/${selected.get(Calendar.MONTH)+1}/${selected.get(Calendar.YEAR)}\"\r\n        }\r\n\r\n        startDateText.setOnClickListener {\r\n            val mDate = DatePickerDialog(requireContext(), startDatePickerListener,now.get(Calendar.YEAR),  now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH))\r\n            mDate.datePicker.maxDate = System.currentTimeMillis()\r\n            mDate.show()\r\n        }\r\n\r\n        endDateText.setOnClickListener {\r\n            if(startDateSelected!=null){\r\n                val mDate = DatePickerDialog(requireContext(), endDatePickerListener, now.get(Calendar.YEAR),  now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH))\r\n                mDate.datePicker.maxDate = System.currentTimeMillis()\r\n                mDate.show()\r\n            }\r\n            else{\r\n                val mDate = DatePickerDialog(requireContext(), endDatePickerListener, now.get(Calendar.YEAR),  now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH))\r\n                mDate.datePicker.maxDate = System.currentTimeMillis()\r\n                mDate.show()\r\n            }\r\n        }\r\n\r\n        clearDate.setOnClickListener {\r\n            startDateText.text = \"\"\r\n            endDateText.text = \"\"\r\n            startDateSelected = null\r\n            endDateSelected = null\r\n        }\r\n\r\n        if(hashMap.containsKey(\"successful\"))\r\n            statusSuccessful.isChecked = true\r\n        if(hashMap.containsKey(\"pending\"))\r\n            statusPending.isChecked = true\r\n        if(hashMap.containsKey(\"failed\"))\r\n            statusFailed.isChecked = true\r\n\r\n        dialog.findViewById<Button>(R.id.referral_filters_date_done).setOnClickListener {\r\n            if(statusSuccessful.isChecked)\r\n                hashMap[\"successful\"] = \"true\"\r\n            else\r\n                hashMap.remove(\"successful\")\r\n\r\n            if(statusPending.isChecked)\r\n                hashMap[\"pending\"] = \"true\"\r\n            else\r\n                hashMap.remove(\"pending\")\r\n\r\n            if(statusFailed.isChecked)\r\n                hashMap[\"failed\"] = \"true\"\r\n            else\r\n                hashMap.remove(\"failed\")\r\n\r\n            if(startDateSelected!=null)\r\n                hashMap[\"start_date\"] = startDateSelected.toString()\r\n            else\r\n                hashMap.remove(\"start_date\")\r\n\r\n            if(endDateSelected!=null)\r\n                hashMap[\"end_date\"] = endDateSelected.toString()\r\n            else\r\n                hashMap.remove(\"end_date\")\r\n\r\n            applyFiltersAndLoadData()\r\n            dialog.dismiss()\r\n        }\r\n        dialog.setCancelable(false)\r\n        dialog.show()\r\n    }\r\n\r\n    private fun applyFiltersAndLoadData() {\r\n        val filterSearch = binding.editTextFilterSearch.text.toString()\r\n\r\n        if (filterSearch.isNotEmpty())\r\n            hashMap[\"search\"] = filterSearch\r\n\r\n        viewModel.loadData(hashMap)\r\n    }\r\n\r\n    //TODO: Maybe find a better way to update list\r\n    private fun updateList(data: ArrayList<ReferredListItemPatient>) {\r\n\r\n        binding.tableViewReferrals.removeAllViews()\r\n\r\n        data.forEach {\r\n\r\n            val inflater = requireContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\r\n            val referListView = inflater.inflate(R.layout.refer_list_item, null)\r\n\r\n            val nameTextView: TextView = referListView.findViewById(R.id.refer_list_item_name)\r\n            val emailTextView: TextView = referListView.findViewById(R.id.refer_list_item_email)\r\n            val referralStatusTextView: TextView = referListView.findViewById(R.id.refer_list_item_status)\r\n            val referralDateTextView: TextView = referListView.findViewById(R.id.refer_list_item_date)\r\n\r\n            nameTextView.text = it.patientName\r\n            emailTextView.text = it.patientMail\r\n            referralDateTextView.text = viewModel.getDateFromTime(it.referralDateValue)\r\n            referralStatusTextView.text = it.referralStatus\r\n\r\n            when(it.referralStatus){\r\n                \"Success\" -> referralStatusTextView.setBackgroundResource(R.drawable.refer_success)\r\n                \"Cancelled\" -> referralStatusTextView.setBackgroundResource(R.drawable.refer_cancelled)\r\n                \"Pending\" -> referralStatusTextView.setBackgroundResource(R.drawable.refer_pending)\r\n            }\r\n\r\n            referListView.setOnClickListener {_ ->\r\n                val bundle=Bundle()\r\n                bundle.putString(\"name\",it.patientName)\r\n                bundle.putString(\"email\",it.patientMail)\r\n                bundle.putString(\"phone\",it.patientPhone)\r\n                bundle.putLong(\"referralDate\", it.referralDateValue)\r\n                bundle.putLong(\"registrationDate\",it.registrationDateValue)\r\n                bundle.putString(\"status\",it.referralStatus)\r\n                view?.findNavController()?.navigate(R.id.action_referListFragment_to_referDetailsFragment,bundle)\r\n            }\r\n\r\n            binding.tableViewReferrals.addView(referListView)\r\n        }\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                activity?.onBackPressed()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/ui/refer/referlist/ReferListFragment.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/ui/refer/referlist/ReferListFragment.kt	(date 1606805396456)
@@ -57,8 +57,13 @@
 
         viewModel= ViewModelProvider(this).get(ReferListViewModel::class.java)
 
+<<<<<<< HEAD
         (activity as AppCompatActivity?)?.supportActionBar?.title="Referrals"
         (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
+=======
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.title="Referrals"
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
         setHasOptionsMenu(true)
 
         viewModel.referredList.observe(viewLifecycleOwner, Observer {
Index: app/src/main/java/com/uptodd/uptoddapp/ui/refer/referdetails/ReferDetailsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.ui.refer.referdetails\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.uptodd.uptoddapp.R\r\nimport com.uptodd.uptoddapp.ReferActivity\r\nimport com.uptodd.uptoddapp.database.account.Account\r\nimport com.uptodd.uptoddapp.database.refer.ReferUser\r\nimport com.uptodd.uptoddapp.database.referrals.ReferredListItemPatient\r\nimport com.uptodd.uptoddapp.databinding.FragmentReferDetailsBinding\r\nimport com.uptodd.uptoddapp.utilities.UpToddDialogs\r\n\r\nclass ReferDetailsFragment : Fragment() {\r\n\r\n    private lateinit var binding:FragmentReferDetailsBinding\r\n    private lateinit var viewModel: ReferDetailsViewModel\r\n\r\n    private var editing = false\r\n\r\n    private var referUser=ReferredListItemPatient()\r\n\r\n    private lateinit var uptoddDialogs: UpToddDialogs\r\n    private lateinit var editMenu: Menu\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        arguments?.let {\r\n            referUser.patientName=it.getString(\"name\")\r\n            referUser.patientMail=it.getString(\"email\")\r\n            referUser.patientPhone=it.getString(\"phone\")\r\n            referUser.referralDateValue=it.getLong(\"referralDate\")\r\n            referUser.registrationDateValue=it.getLong(\"registrationDate\")\r\n            referUser.referralStatus=it.getString(\"status\")\r\n//            referUser.isPaid=it.getBoolean(\"isPaid\")\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        uptoddDialogs = UpToddDialogs(requireContext())\r\n\r\n        binding=DataBindingUtil.inflate(layoutInflater,R.layout.fragment_refer_details,container,false)\r\n        binding.lifecycleOwner=this\r\n\r\n        viewModel=ViewModelProvider(this).get(ReferDetailsViewModel::class.java)\r\n\r\n        (activity as AppCompatActivity?)?.supportActionBar?.title=\"Change password\"\r\n        (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);\r\n        setHasOptionsMenu(true)\r\n\r\n        if(referUser.referralStatus == \"Pending\") {\r\n            setHasOptionsMenu(true)\r\n        }\r\n\r\n        binding.referralDetailsViewModel=viewModel\r\n\r\n        viewModel.isLoading.observe(viewLifecycleOwner, {\r\n            when(it){\r\n                1 ->{\r\n                    uptoddDialogs.showUploadDialog()\r\n                }\r\n                0 -> {\r\n                    uptoddDialogs.dismissDialog()\r\n                    uptoddDialogs.showDialog(R.drawable.gif_done, \"New details have been submitted successfully!\", \"OK\", object: UpToddDialogs.UpToddDialogListener{\r\n                        override fun onDialogButtonClicked(dialog: Dialog) {\r\n                            uptoddDialogs.dismissDialog()\r\n                            stopEditingDetails()\r\n                            editing = false\r\n                            editMenu.findItem(R.id.doctor_account_edit).setIcon(R.drawable.material_edit_white)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n        binding.referralDetailsSubmit.setOnClickListener {\r\n            if(referUser.referralStatus == \"Success\") {\r\n                viewModel.submit()\r\n            }\r\n            Log.i(\"Value\", viewModel.referralEmail.value!!)\r\n            findNavController().navigateUp()\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun stopEditingDetails(){\r\n        binding.referralDetailsEmail.isEnabled = false\r\n        binding.referralDetailsEmail.isFocusable = false\r\n        binding.referralDetailsEmail.isFocusableInTouchMode = false\r\n\r\n        binding.referralDetailsPhone.isEnabled = false\r\n        binding.referralDetailsPhone.isFocusable = false\r\n        binding.referralDetailsPhone.isFocusableInTouchMode = false\r\n\r\n        binding.referralDetailsSubmit.visibility=View.INVISIBLE\r\n\r\n        binding.referralDetailsLayout1Field2.setBackgroundResource(R.drawable.round_edittext)\r\n        binding.referralDetailsLayout2Field2.setBackgroundResource(R.drawable.round_edittext)\r\n        binding.referralDetailsLayout3Field2.setBackgroundResource(R.drawable.round_edittext)\r\n\r\n    }\r\n\r\n    private fun editDetails(){\r\n        binding.referralDetailsEmail.isEnabled = true\r\n        binding.referralDetailsEmail.isFocusable = true\r\n        binding.referralDetailsEmail.isFocusableInTouchMode = true\r\n\r\n        binding.referralDetailsPhone.isEnabled = true\r\n        binding.referralDetailsPhone.isFocusable = true\r\n        binding.referralDetailsPhone.isFocusableInTouchMode = true\r\n\r\n        binding.referralDetailsSubmit.visibility=View.VISIBLE\r\n\r\n        binding.referralDetailsLayout1Field2.setBackgroundResource(0)\r\n        binding.referralDetailsLayout2Field2.setBackgroundResource(0)\r\n        binding.referralDetailsLayout3Field2.setBackgroundResource(0)\r\n\r\n    }\r\n\r\n    /*override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if(item.itemId==R.id.doctor_account_edit) {\r\n            if (editing) {\r\n                editing = false\r\n                item.setIcon(R.drawable.material_edit_white)\r\n                sendDetails()\r\n                stopEditingDetails()\r\n            } else {\r\n                editing = true\r\n                item.setIcon(R.drawable.material_save_white)\r\n                editDetails()\r\n            }\r\n            return true\r\n        }\r\n        else\r\n            return super.onOptionsItemSelected(item)\r\n    }*/\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        editMenu = menu\r\n        inflater.inflate(R.menu.menu_user_account, menu)\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if(item.itemId==R.id.item_edit) {\r\n            if (editing) {\r\n                AlertDialog.Builder(requireContext())\r\n                    .setTitle(\"Cancel Editing?\")\r\n                    .setMessage(\"Are you sure you want to discard the changes?\")\r\n                    .setPositiveButton(\"Yes\") { _, _ ->\r\n                        editing = false\r\n                        item.setIcon(R.drawable.material_edit_white)\r\n                        viewModel.setUp(referUser)\r\n                        stopEditingDetails()\r\n                    }\r\n                    .setNegativeButton(\"No\"){df,_->\r\n                        df.dismiss()\r\n                    }\r\n                    .show()\r\n            } else {\r\n                editing = true\r\n                item.setIcon(R.drawable.ic_baseline_save_24)\r\n                editDetails()\r\n            }\r\n            return true\r\n        }\r\n        else if(item.itemId==R.id.home)\r\n        {\r\n            activity?.onBackPressed()\r\n            return true\r\n        }\r\n        else\r\n            return super.onOptionsItemSelected(item)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/ui/refer/referdetails/ReferDetailsFragment.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/ui/refer/referdetails/ReferDetailsFragment.kt	(date 1606805394852)
@@ -56,8 +56,13 @@
 
         viewModel=ViewModelProvider(this).get(ReferDetailsViewModel::class.java)
 
+<<<<<<< HEAD
         (activity as AppCompatActivity?)?.supportActionBar?.title="Change password"
         (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
+=======
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.title="Change password"
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
         setHasOptionsMenu(true)
 
         if(referUser.referralStatus == "Pending") {
Index: app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/selecttype/SelectTypeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.ui.capturemoments.selecttype\r\n\r\nimport android.app.Dialog\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.drawable.BitmapDrawable\r\nimport android.graphics.drawable.Drawable\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.viewpager.widget.ViewPager\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.uptodd.uptoddapp.R\r\nimport com.uptodd.uptoddapp.database.capturemoments.selecttype.PhotoType\r\nimport com.uptodd.uptoddapp.databinding.FragmentSelectTypeBinding\r\nimport com.uptodd.uptoddapp.utilities.AppNetworkStatus\r\nimport com.uptodd.uptoddapp.utilities.ScreenDpi\r\nimport com.uptodd.uptoddapp.utilities.UpToddDialogs\r\nimport kotlinx.android.synthetic.main.photo_type_item_view.view.*\r\nimport java.io.File\r\nimport java.lang.Math.abs\r\n\r\n\r\nclass SelectTypeFragment : Fragment(), SelectTypeAdapter.OnClickListener {\r\n\r\n    private lateinit var binding:FragmentSelectTypeBinding\r\n\r\n    private var imagePath: String? =null\r\n    private var photoType:String?=null\r\n\r\n    private var backgroundBitmap: Bitmap?=null\r\n    private lateinit var viewModel: SelectTypeViewModel\r\n\r\n    private lateinit var adapter:SelectTypeAdapter\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        arguments?.let {\r\n            imagePath = it.getString(\"imagePath\")\r\n            Log.d(\"div\", \"SelectTypeFragment L19 $imagePath\")\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding=DataBindingUtil.inflate(inflater, R.layout.fragment_select_type, container, false)\r\n        binding.lifecycleOwner=this\r\n\r\n        viewModel=ViewModelProvider(this, SelectTypeViewModelFactory(requireActivity().application))\r\n            .get(SelectTypeViewModel::class.java)\r\n\r\n        (activity as AppCompatActivity?)?.supportActionBar?.title=\"Capture Moments\"\r\n        (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);\r\n        setHasOptionsMenu(true)\r\n\r\n        //viewModel.getAllPhotoTypes()\r\n\r\n        Log.d(\"div\",\"${ScreenDpi(requireContext()).getScreenDpiRatio()} ${ScreenDpi(requireContext()).getScreenDrawableType()}\")\r\n\r\n        setLayoutBackground()\r\n        adapter= SelectTypeAdapter(emptyList(),this.requireContext(),this)\r\n\r\n        viewModel.photoTypeList.observe(viewLifecycleOwner, Observer {\r\n            Log.d(\"div\", \"SelectTypeFragment L73 ${viewModel.photoTypeList.value}\")\r\n            if (viewModel.photoTypeList.value == null || viewModel.photoTypeList.value!!.isEmpty()) {\r\n                viewModel.isRepositoryEmpty.value = true\r\n                loadData()\r\n\r\n            } else\r\n                viewModel.isRepositoryEmpty.value = false\r\n            if (viewModel.photoTypeList.value!!.isNotEmpty()) {\r\n                Log.d(\"div\", \"SelectTypeFragment L69 ${viewModel.photoTypeList.value!![0]}\")\r\n                adapter =\r\n                    SelectTypeAdapter(viewModel.photoTypeList.value!!, this.requireContext(), this)\r\n                binding.viewPager.adapter = adapter\r\n            }\r\n        })\r\n\r\n\r\n        binding.viewPager.adapter=adapter\r\n        formatViewPager(binding.viewPager)\r\n        binding.viewPager.setOnPageChangeListener(object: ViewPager.OnPageChangeListener {\r\n            override fun onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int ) {\r\n                if(position<viewModel.photoTypeList.value!!.size)\r\n                    setLayoutBackground()\r\n            }\r\n            override fun onPageSelected(position: Int) {}\r\n            override fun onPageScrollStateChanged(state: Int) {}\r\n        })\r\n        binding.tabLayout.setupWithViewPager(binding.viewPager, true);\r\n\r\n        //inflatePhotoTypes()\r\n\r\n        return binding.root\r\n    }\r\n\r\n    private fun loadData() {\r\n        if (AppNetworkStatus.getInstance(requireContext()).isOnline) {\r\n            showLoadingDialog()\r\n            viewModel.refresh()\r\n        }\r\n        else{\r\n            val snackbar= Snackbar.make(binding.layout,\"No internet connection\",Snackbar.LENGTH_LONG)\r\n                .setAction(\"RETRY\"){\r\n                    loadData()\r\n                }\r\n            snackbar.show()\r\n        }\r\n    }\r\n\r\n    private fun setLayoutBackground()\r\n    {\r\n        val imgFile = File(imagePath)\r\n        if (imgFile.exists()) {\r\n            backgroundBitmap = BitmapFactory.decodeFile(imgFile.absolutePath)\r\n            val drawable: Drawable = BitmapDrawable(resources, backgroundBitmap)\r\n            binding.viewPager.background=drawable\r\n            binding.viewPager.background.alpha=100\r\n        }\r\n        else{\r\n            Toast.makeText(activity, \"Image not found in storage\", Toast.LENGTH_LONG).show()\r\n            requireActivity().finish()\r\n        }\r\n    }\r\n\r\n    private fun inflatePhotoTypes()\r\n    {\r\n        var i:Int=0\r\n        while(i<viewModel.photoTypeList.value!!.size) {\r\n            /*val imgUrl=viewModel.photoTypeList[i].imageURL\r\n            var childView: View\r\n            val inflater = activity?.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\r\n            childView = inflater.inflate(R.layout.photo_type_item_view,null)\r\n            val imageView=childView.imageView\r\n            imgUrl.let {\r\n                val imgUri = imgUrl?.toUri()?.buildUpon()?.scheme(\"https\")?.build()\r\n                Glide.with(imageView.context)\r\n                    .load(imgUri)\r\n                    .apply(\r\n                        RequestOptions()\r\n                            .placeholder(R.drawable.loading_animation)\r\n                            .error(R.drawable.ic_broken_image)\r\n                    )\r\n                    .into(imageView)\r\n            }\r\n            val text=viewModel.photoTypeList[i].title\r\n            childView.textView.text=text\r\n            childView.textView.setOnClickListener{onClickType(text)}\r\n            childView.imageView.setOnClickListener{onClickType(text)}\r\n            binding.linearLayout.addView(childView)*/\r\n            i++\r\n        }\r\n    }\r\n\r\n    override fun onClickType(type:String?)\r\n    {\r\n        val bundle=Bundle()\r\n        bundle.putString(\"photoType\",type)\r\n        bundle.putString(\"imagePath\",imagePath)\r\n        view?.findNavController()?.navigate(R.id.action_selectTypeFragment_to_generateCardFragment,bundle)\r\n    }\r\n\r\n    private fun formatViewPager(viewPager: ViewPager)\r\n    {\r\n        viewPager.clipToPadding=false\r\n        viewPager.pageMargin=50\r\n        viewPager.setPadding(100,0,100,0)\r\n        val nextItemVisiblePx = 50\r\n        val currentItemHorizontalMarginPx = 50\r\n        val pageTranslationX = nextItemVisiblePx + currentItemHorizontalMarginPx\r\n        val pageTransformer = ViewPager.PageTransformer { page: View, position: Float ->\r\n            page.translationX = -pageTranslationX * position\r\n            // Next line scales the item's height. You can remove it if you don't want this effect\r\n            page.scaleY = 1 - (0.25f * abs(position))\r\n            // If you want a fading effect uncomment the next line:\r\n            page.alpha = 0.75f + (1 - abs(position))\r\n        }\r\n        viewPager.setPageTransformer(true,pageTransformer)\r\n\r\n        //val itemDecoration = HorizontalMarginItemDecoration(requireContext(),50)\r\n        //viewPager.addItemDecoration(itemDecoration)\r\n\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                activity?.onBackPressed()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    private fun showLoadingDialog() {\r\n        val upToddDialogs = UpToddDialogs(requireContext())\r\n        upToddDialogs.showDialog(R.drawable.gif_loading,\r\n            \"Loading, please wait\",\r\n            \"Back\",\r\n            object : UpToddDialogs.UpToddDialogListener {\r\n                override fun onDialogButtonClicked(dialog: Dialog) {\r\n                    dialog.dismiss()\r\n                    findNavController().navigateUp()\r\n                }\r\n            })\r\n        viewModel.isRepositoryEmpty.observe(viewLifecycleOwner, Observer {\r\n            if (!it) {\r\n                upToddDialogs.dismissDialog()\r\n            }\r\n        })\r\n        val handler= Handler()\r\n        handler.postDelayed(Runnable {\r\n            upToddDialogs.dismissDialog()\r\n        }, R.string.loadingDuarationInMillis.toLong())\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/selecttype/SelectTypeFragment.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/selecttype/SelectTypeFragment.kt	(date 1606805399653)
@@ -13,7 +13,13 @@
 import android.view.View
 import android.view.ViewGroup
 import android.widget.Toast
+<<<<<<< HEAD
 import androidx.appcompat.app.AppCompatActivity
+=======
+import androidx.annotation.DimenRes
+import androidx.appcompat.app.AppCompatActivity
+import androidx.core.net.toUri
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
 import androidx.databinding.DataBindingUtil
 import androidx.fragment.app.Fragment
 import androidx.lifecycle.Observer
@@ -60,11 +66,16 @@
         binding=DataBindingUtil.inflate(inflater, R.layout.fragment_select_type, container, false)
         binding.lifecycleOwner=this
 
+<<<<<<< HEAD
         viewModel=ViewModelProvider(this, SelectTypeViewModelFactory(requireActivity().application))
             .get(SelectTypeViewModel::class.java)
 
         (activity as AppCompatActivity?)?.supportActionBar?.title="Capture Moments"
         (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
+=======
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.title="Capture Moments"
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
         setHasOptionsMenu(true)
 
         //viewModel.getAllPhotoTypes()
Index: app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/captureimage/CaptureImageFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.ui.capturemoments.captureimage\r\n\r\n\r\nimport android.Manifest\r\nimport android.app.Activity.RESULT_OK\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.Bitmap.CompressFormat\r\nimport android.graphics.Color\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.os.Environment\r\nimport android.provider.MediaStore\r\nimport android.provider.MediaStore.Images\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat.checkSelfPermission\r\nimport androidx.core.graphics.drawable.DrawableCompat\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.findNavController\r\nimport com.otaliastudios.cameraview.CameraListener\r\nimport com.otaliastudios.cameraview.PictureResult\r\nimport com.otaliastudios.cameraview.controls.Facing\r\nimport com.otaliastudios.cameraview.controls.Flash\r\nimport com.otaliastudios.cameraview.controls.Mode\r\nimport com.uptodd.uptoddapp.R\r\nimport com.uptodd.uptoddapp.databinding.FragmentCaptureImageBinding\r\nimport java.io.ByteArrayOutputStream\r\nimport java.io.File\r\nimport java.io.FileOutputStream\r\nimport java.io.IOException\r\nimport java.sql.Timestamp\r\nimport java.util.*\r\n\r\n\r\n//class CaptureImageFragment : Fragment(), SurfaceHolder.Callback {\r\n\r\n    /*private lateinit var binding:FragmentCaptureImageBinding\r\n\r\n    private var camera: Camera?=null\r\n    private lateinit var surfaceHolder: SurfaceHolder\r\n    private lateinit var pictureCallback: Camera.PictureCallback\r\n\r\n    private var pictureBitmap: Bitmap?=null\r\n\r\n    private var fileName:String?=null\r\n\r\n    private var cameraType:String=\"back\"\r\n    private var flash:Boolean=false\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        binding= DataBindingUtil.inflate(\r\n            inflater,\r\n            R.layout.fragment_capture_image,\r\n            container,\r\n            false\r\n        )\r\n        binding.lifecycleOwner = this\r\n\r\n        surfaceHolder=binding.surfaceView.holder\r\n        surfaceHolder.addCallback(this)\r\n        surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS)\r\n\r\n        binding.buttonCapture.setOnClickListener { onClickCapture() }\r\n\r\n        if (Camera.getNumberOfCameras() > 1) {\r\n            binding.imageButtonFlipCamera.visibility = View.VISIBLE\r\n        }\r\n        if (activity?.packageManager!!.hasSystemFeature(\r\n                PackageManager.FEATURE_CAMERA_FLASH\r\n            )) {\r\n            binding.imageButtonFlash.visibility = View.GONE\r\n        }\r\n\r\n        pictureCallback=Camera.PictureCallback { bytes: ByteArray, camera: Camera ->\r\n            onPictureTaken(bytes, camera)\r\n        }\r\n\r\n        binding.imageButtonFlash.setOnClickListener{onClickFlash()}\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun surfaceCreated(holder: SurfaceHolder) {\r\n        Log.d(\"div\", \"CaptureImageFragment L57 Surface Created\")\r\n        try{camera= Camera.open()}\r\n        catch (e: Exception){ Log.d(\"div\", \"CaptureImageFragment L59 Error $e\")}\r\n\r\n        /*val displayMetrics = DisplayMetrics()\r\n        activity?.windowManager?.defaultDisplay?.getMetrics(displayMetrics)\r\n        val height = displayMetrics.heightPixels\r\n        val width = displayMetrics.widthPixels\r\n        Log.d(\"div\",\"CaptureImageFragment L70 $height $width\")*/\r\n\r\n\r\n        val parameters=camera!!.parameters\r\n\r\n        val allSizes: List<Camera.Size> = parameters.supportedPictureSizes\r\n        var size: Camera.Size = allSizes[0]\r\n        for (i in allSizes.indices)\r\n            if (allSizes[i].width > size.width && allSizes[i].height>size.height) size = allSizes[i]\r\n        parameters.setPictureSize(size.width, size.height)\r\n\r\n        parameters.previewFrameRate=30\r\n\r\n        val allPreviewSizes: List<Camera.Size> = parameters.supportedPreviewSizes\r\n        var previewSize: Camera.Size = allPreviewSizes[0]\r\n        for (i in allPreviewSizes.indices)\r\n            if (allPreviewSizes[i].width >previewSize.width && allPreviewSizes[i].height>previewSize.height) previewSize = allPreviewSizes[i]\r\n        parameters.setPreviewSize(previewSize.width, previewSize.height)\r\n        Log.d(\r\n            \"div\",\r\n            \"CaptureImageFragment L87 ${size.width} ${size.height} ${previewSize.width} ${previewSize.height}\"\r\n        )\r\n        camera!!.parameters=parameters\r\n        camera!!.setDisplayOrientation(90)\r\n\r\n        try{\r\n            camera!!.setPreviewDisplay(surfaceHolder)\r\n            camera!!.startPreview()\r\n        }\r\n        catch (e: IOException){\r\n            Log.d(\"div\", \"CaptureImageFragment L65 Error $e\")\r\n        }\r\n    }\r\n\r\n    override fun surfaceChanged(holder: SurfaceHolder, format: Int, width: Int, height: Int) {\r\n        Log.d(\"div\", \"CaptureImageFragment L76 Surface Changed\")\r\n    }\r\n\r\n    override fun surfaceDestroyed(holder: SurfaceHolder) {\r\n        Log.d(\"div\", \"CaptureImageFragment L80 Surface Destroyed\")\r\n        camera!!.stopPreview()\r\n        camera!!.release()\r\n        camera=null\r\n    }\r\n\r\n    private fun onClickCapture()\r\n    {\r\n        camera!!.takePicture(null, null, pictureCallback)\r\n    }\r\n\r\n    private fun onPictureTaken(bytes: ByteArray, camera: Camera)\r\n    {\r\n        val bitmap:Bitmap=BitmapFactory.decodeByteArray(bytes, 0, bytes.size)\r\n        pictureBitmap=Bitmap.createBitmap(bitmap, 0, 0, bitmap.width, bitmap.height, null, true)\r\n\r\n        fileName=getFileName()\r\n        Log.d(\"div\", \"CaptureImageFragment L77 $fileName $pictureBitmap\")\r\n        storePhotoToStorage(pictureBitmap, fileName)\r\n        //this.camera!!.startPreview()\r\n    }\r\n\r\n    private fun getFileName(): String? {\r\n        val dateFormat=SimpleDateFormat(\"yyyyMMdd_HHmmss\")\r\n        return dateFormat.format(Date())\r\n    }\r\n\r\n    private fun storePhotoToStorage(pictureBitmap: Bitmap?, fileName: String?) {\r\n\r\n    }\r\n\r\n    override fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r\n\r\n        val currentOrientation = resources.configuration.orientation\r\n        if (currentOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n            camera!!.setDisplayOrientation(0)\r\n        } else {\r\n            camera!!.setDisplayOrientation(90)\r\n        }\r\n    }\r\n\r\n    private fun onClickFlash()\r\n    {\r\n        if (camera != null) {\r\n            try {\r\n                val param: Camera.Parameters = camera!!.parameters\r\n                param.flashMode = if (!flash) Camera.Parameters.FLASH_MODE_TORCH else Camera.Parameters.FLASH_MODE_OFF\r\n                camera!!.parameters = param\r\n                flash = !flash\r\n            } catch (e: java.lang.Exception) {\r\n                Log.d(\"div\",\"CaptureImageFragment L179 $e\")\r\n            }\r\n        }\r\n    }\r\n}*/\r\n\r\n\r\n    /*private lateinit var binding: FragmentCaptureImageBinding\r\n\r\n    private lateinit var surfaceView: SurfaceView\r\n    private lateinit var surfaceHolder: SurfaceHolder\r\n    private var camera: Camera? = null\r\n    private lateinit var flipCamera: ImageButton\r\n    private lateinit var flashCameraButton: ImageButton\r\n    private lateinit var captureImage: Button\r\n    private var cameraId = 0\r\n    private var flashmode = false\r\n    private var rotation = 0\r\n\r\n    private var cameraPermissinGranted:Boolean=false\r\n    private var storagePermissinGranted:Boolean=false\r\n\r\n    private val STORAGE_PERMISSION_REQUEST_CODE=0\r\n    private val CAMERA_PERMISSION_REQUEST_CODE=1\r\n\r\n    private var previousActivity:String?=\"Home\"                          //Enter the previous activity here and get it through intent also\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        (activity as AppCompatActivity?)?.supportActionBar?.title=\"Capture Moments\"\r\n        (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);\r\n        setHasOptionsMenu(true)\r\n\r\n        cameraPermissinGranted=hasCameraPermission()\r\n        storagePermissinGranted=hasStoragePermission()\r\n\r\n        if(cameraPermissinGranted && storagePermissinGranted) {\r\n\r\n            binding = DataBindingUtil.inflate(\r\n                inflater,\r\n                R.layout.fragment_capture_image,\r\n                container,\r\n                false\r\n            )\r\n            binding.lifecycleOwner = this\r\n\r\n            val intent = activity?.intent\r\n            previousActivity = intent!!.getStringExtra(\"Previous activity\")\r\n\r\n            cameraId = Camera.CameraInfo.CAMERA_FACING_BACK\r\n            flipCamera = binding.imageButtonFlipCamera\r\n            flashCameraButton = binding.imageButtonFlash\r\n            captureImage = binding.buttonCapture\r\n            surfaceView = binding.surfaceView\r\n            surfaceHolder = surfaceView.holder\r\n            surfaceHolder.addCallback(this)\r\n            flipCamera.setOnClickListener { flipCamera() }\r\n            captureImage.setOnClickListener { takeImage() }\r\n            flashCameraButton.setOnClickListener { flashOnButton() }\r\n            binding.imageButtonGallery.setOnClickListener { onClickGallery() }\r\n            activity?.window?.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\r\n\r\n            if (Camera.getNumberOfCameras() > 1) {\r\n                flipCamera.visibility = View.VISIBLE\r\n            }\r\n            if (!activity?.baseContext?.packageManager?.hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH)!!) {\r\n                flashCameraButton.visibility = View.GONE\r\n            }\r\n\r\n            DrawableCompat.setTint(binding.imageButtonGallery.drawable, Color.WHITE)\r\n            DrawableCompat.setTint(binding.imageButtonFlipCamera.drawable, Color.WHITE)\r\n            DrawableCompat.setTint(binding.imageButtonFlash.drawable, Color.WHITE)\r\n        }\r\n        else{\r\n            Toast.makeText(activity,\"Permission denied\",Toast.LENGTH_LONG).show()\r\n            activity?.fragmentManager?.popBackStack();\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n\r\n    private fun hasStoragePermission():Boolean {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if (checkSelfPermission(requireActivity(),Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n                requestPermissions(arrayOf<String>(Manifest.permission.WRITE_EXTERNAL_STORAGE), STORAGE_PERMISSION_REQUEST_CODE)\r\n                return storagePermissinGranted;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    private fun hasCameraPermission():Boolean {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if (checkSelfPermission(requireActivity(),Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\r\n                requestPermissions(arrayOf<String>(Manifest.permission.CAMERA), CAMERA_PERMISSION_REQUEST_CODE)\r\n                return cameraPermissinGranted;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (grantResults.size > 1\r\n            && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1]==PackageManager.PERMISSION_GRANTED) {\r\n            if (requestCode == CAMERA_PERMISSION_REQUEST_CODE)\r\n                cameraPermissinGranted=true\r\n            if(requestCode==STORAGE_PERMISSION_REQUEST_CODE)\r\n                storagePermissinGranted=true\r\n        }\r\n    }\r\n\r\n    override fun surfaceCreated(holder: SurfaceHolder) {\r\n        if (!openCamera(CameraInfo.CAMERA_FACING_BACK)) {\r\n            alertCameraDialog()\r\n        }\r\n    }\r\n\r\n    private fun openCamera(id: Int): Boolean {\r\n        var result = false\r\n        cameraId = id\r\n        releaseCamera()\r\n        try {\r\n            camera = Camera.open(cameraId)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n        if (camera != null) {\r\n            try {\r\n                setUpCamera(camera!!)\r\n                camera!!.setErrorCallback { error, camera -> }\r\n                camera!!.setPreviewDisplay(surfaceHolder)\r\n                camera!!.startPreview()\r\n                result = true\r\n            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n                result = false\r\n                releaseCamera()\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    private fun setUpCamera(c: Camera) {\r\n        val info = CameraInfo()\r\n        Camera.getCameraInfo(cameraId, info)\r\n        rotation = activity?.windowManager?.defaultDisplay!!.rotation\r\n        var degree = 0\r\n        when (rotation) {\r\n            Surface.ROTATION_0 -> degree = 0\r\n            Surface.ROTATION_90 -> degree = 90\r\n            Surface.ROTATION_180 -> degree = 180\r\n            Surface.ROTATION_270 -> degree = 270\r\n            else -> {\r\n            }\r\n        }\r\n        if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {\r\n            rotation = (info.orientation + degree) % 330\r\n            Log.d(\"div\",\"CaptureImageFragement L364 $rotation ${info.orientation} $degree\")\r\n            rotation = (360 - rotation) % 360\r\n            Log.d(\"div\",\"CaptureImageFragement L364 $rotation \")\r\n        } else {\r\n            rotation = (info.orientation - degree + 360) % 360\r\n            Log.d(\"div\",\"CaptureImageFragement L364 $rotation ${info.orientation} $degree\")\r\n        }\r\n        c.setDisplayOrientation(rotation)\r\n        val params: Camera.Parameters = c.parameters\r\n\r\n        params.jpegQuality = 100\r\n        /*val allSizes: List<Camera.Size> = params.supportedPictureSizes\r\n        var size: Camera.Size = allSizes[0]\r\n        for (i in allSizes.indices)\r\n            if ( allSizes[i].height>size.height) size = allSizes[i]\r\n        params.setPictureSize(size.width, size.height)\r\n\r\n        val allPreviewSizes: List<Camera.Size> = params.supportedPreviewSizes\r\n        var previewSize: Camera.Size = allPreviewSizes[0]\r\n        for (i in allPreviewSizes.indices)\r\n            if (allPreviewSizes[i].height>previewSize.height) previewSize = allPreviewSizes[i]\r\n        params.setPreviewSize(previewSize.width, previewSize.height)*/\r\n\r\n        showFlashButton(params)\r\n        val focusModes: List<String> = params.supportedFocusModes\r\n        if (focusModes != null) {\r\n            if (focusModes.contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE))\r\n            {\r\n                params.focusMode = Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE\r\n            }\r\n        }\r\n        params.setRotation(rotation)\r\n    }\r\n\r\n    private fun showFlashButton(params: Camera.Parameters) {\r\n        val showFlash = (activity?.packageManager!!.hasSystemFeature(\r\n            PackageManager.FEATURE_CAMERA_FLASH\r\n        ) && params.flashMode != null\r\n                && params.supportedFlashModes != null && params.supportedFocusModes\r\n            .size > 1)\r\n        flashCameraButton.visibility = if (showFlash) View.VISIBLE else View.INVISIBLE\r\n    }\r\n\r\n    private fun releaseCamera() {\r\n        try {\r\n            if (camera != null) {\r\n                camera!!.setPreviewCallback(null)\r\n                camera!!.setErrorCallback(null)\r\n                camera!!.stopPreview()\r\n                camera!!.release()\r\n                camera = null\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            Log.d(\"div\", e.toString())\r\n            camera = null\r\n        }\r\n    }\r\n\r\n    override fun surfaceChanged(holder: SurfaceHolder, format: Int, width: Int, height: Int) {\r\n    }\r\n\r\n    override fun surfaceDestroyed(holder: SurfaceHolder) {}\r\n\r\n    private fun takeImage() {\r\n        if(camera!=null)\r\n        {\r\n            try {\r\n                val param: Camera.Parameters = camera!!.parameters\r\n                param.flashMode = if (flashmode) Camera.Parameters.FLASH_MODE_TORCH else Camera.Parameters.FLASH_MODE_OFF\r\n                camera!!.parameters = param\r\n                if(flashmode)\r\n                    Thread.sleep(2000)\r\n            }\r\n            catch (e: Exception)\r\n            {Log.d(\"div\", \"CaptureImageFragment L477 $e\")}\r\n        }\r\n        camera!!.takePicture(null, null, object : PictureCallback {\r\n            override fun onPictureTaken(data: ByteArray, camera: Camera) {\r\n                try {\r\n                    var loadedImage: Bitmap? = null\r\n                    var rotatedBitmap: Bitmap? = null\r\n                    loadedImage = BitmapFactory.decodeByteArray(data, 0, data.size)\r\n\r\n                    val rotateMatrix = Matrix()\r\n                    val info = CameraInfo()\r\n                    Camera.getCameraInfo(cameraId, info)\r\n                    if(info.facing == CameraInfo.CAMERA_FACING_FRONT)\r\n                        rotation-=180\r\n                    rotateMatrix.postRotate(rotation.toFloat())\r\n                    rotatedBitmap = Bitmap.createBitmap(loadedImage, 0, 0, loadedImage.width, loadedImage.height, rotateMatrix, false)\r\n                    saveToFile(rotatedBitmap)\r\n                } catch (e: Exception) {\r\n                    if (camera != null) {\r\n                        try {\r\n                            val param: Camera.Parameters = camera.parameters\r\n                            param.flashMode = Camera.Parameters.FLASH_MODE_OFF\r\n                            camera.parameters = param\r\n                        } catch (e: Exception) {\r\n                            Log.d(\"div\", \"CaptureImageFragment L442 $e\")\r\n                        }\r\n                    }\r\n                    e.printStackTrace()\r\n                }\r\n            }\r\n        })\r\n        if(camera!=null)\r\n        {\r\n            try {\r\n                val param: Camera.Parameters = camera!!.parameters\r\n                param.flashMode =Camera.Parameters.FLASH_MODE_OFF\r\n                camera!!.parameters = param\r\n            }\r\n            catch (e: Exception)\r\n            {Log.d(\"div\", \"CaptureImageFragment L477 $e\")}\r\n        }\r\n    }\r\n\r\n    private fun flipCamera() {\r\n        val id =\r\n            (if (cameraId == CameraInfo.CAMERA_FACING_BACK) CameraInfo.CAMERA_FACING_FRONT else CameraInfo.CAMERA_FACING_BACK)\r\n        if (!openCamera(id)) {\r\n            alertCameraDialog()\r\n        }\r\n        DrawableCompat.setTint(binding.imageButtonFlipCamera.drawable, Color.WHITE)\r\n    }\r\n\r\n    private fun alertCameraDialog() {\r\n        val dialog: AlertDialog.Builder = createAlert(\r\n            requireActivity(),\r\n            \"Camera info\", \"Error in opening camera\"\r\n        )\r\n        dialog.setNegativeButton(\"OK\",\r\n            DialogInterface.OnClickListener { dialog, which -> dialog.cancel() })\r\n        dialog.show()\r\n    }\r\n\r\n    private fun createAlert(context: Context, title: String?, message: String): AlertDialog.Builder {\r\n        val dialog: AlertDialog.Builder = AlertDialog.Builder(\r\n            ContextThemeWrapper(\r\n                context,\r\n                android.R.style.Theme_Holo_Light_Dialog\r\n            )\r\n        )\r\n        dialog.setIcon(R.drawable.app_icon)\r\n        if (title != null) dialog.setTitle(title) else dialog.setTitle(\"Information\")\r\n        dialog.setMessage(message)\r\n        dialog.setCancelable(false)\r\n        return dialog\r\n    }\r\n\r\n    private fun flashOnButton() {\r\n        if (camera != null) {\r\n            try {\r\n                /*val param: Camera.Parameters = camera!!.parameters\r\n                param.flashMode = if (!flashmode) Camera.Parameters.FLASH_MODE_TORCH else Camera.Parameters.FLASH_MODE_OFF\r\n                camera!!.parameters = param*/\r\n                flashmode = !flashmode\r\n                if(flashmode)\r\n                    binding.imageButtonFlash.setImageResource(R.drawable.ic_baseline_flash_on_24)\r\n                else\r\n                    binding.imageButtonFlash.setImageResource(R.drawable.ic_baseline_flash_off_24)\r\n            } catch (e: Exception) {\r\n                Log.d(\"div\", \"CaptureImageFragment L477 $e\")\r\n            }\r\n        }\r\n        DrawableCompat.setTint(binding.imageButtonFlash.drawable, Color.WHITE)\r\n    }\r\n\r\n    private fun onClickGallery()\r\n    {\r\n        val pickPhoto = Intent(Intent.ACTION_PICK, Images.Media.EXTERNAL_CONTENT_URI)\r\n        startActivityForResult(pickPhoto, 1)\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        //super.onActivityResult(requestCode, resultCode, data)\r\n        if (resultCode == RESULT_OK && data != null && data.data!=null) {\r\n            val selectedImage = data.data\r\n            val bitmap:Bitmap = MediaStore.Images.Media.getBitmap(activity?.contentResolver, selectedImage)\r\n            saveToFile(bitmap)\r\n\r\n\r\n        }\r\n        else\r\n            Toast.makeText(activity,\"Failed to choose image\",Toast.LENGTH_LONG)\r\n    }\r\n\r\n    private fun saveToFile(bitmap:Bitmap)\r\n    {\r\n        var imageFile: File? = null\r\n        try {\r\n            val state: String = Environment.getExternalStorageState()\r\n            var folder: File? = null\r\n            if (state.contains(Environment.MEDIA_MOUNTED)) {\r\n                folder = File(Environment.getExternalStorageDirectory().toString() + \"/UpToddCards\")\r\n            } else {\r\n                folder = File(Environment.getExternalStorageDirectory().toString() + \"/UpToddCards\")\r\n            }\r\n            var success = true\r\n            if (!folder.exists()) {\r\n                success = folder.mkdirs()\r\n            }\r\n            if (success) {\r\n                val date = Date()\r\n                imageFile = File(\r\n                    folder.absolutePath + File.separator + Timestamp(date.time).toString().toString() + \"Image.jpg\")\r\n                imageFile.createNewFile()\r\n            } else {\r\n                Toast.makeText(activity, \"Image Not saved\", Toast.LENGTH_SHORT).show()\r\n                return\r\n            }\r\n            val ostream = ByteArrayOutputStream()\r\n\r\n            bitmap.compress(CompressFormat.JPEG, 100, ostream)\r\n            val fout = FileOutputStream(imageFile)\r\n            fout.write(ostream.toByteArray())\r\n            fout.close()\r\n            val values = ContentValues()\r\n            values.put(Images.Media.DATE_TAKEN, System.currentTimeMillis())\r\n            values.put(Images.Media.MIME_TYPE, \"image/jpeg\")\r\n            values.put(MediaStore.MediaColumns.DATA, imageFile.absolutePath)\r\n            activity?.contentResolver?.insert(Images.Media.EXTERNAL_CONTENT_URI, values)\r\n            Log.d(\"div\",\"CaptureImageFragment L536 path= ${imageFile.absolutePath}\")\r\n\r\n\r\n            if(// previousActivity==\"Home\"\r\n            true ) {\r\n                val bundle=Bundle()\r\n                bundle.putString(\"imagePath\",imageFile.absolutePath)\r\n\r\n                view?.findNavController()?.navigate(R.id.action_captureImageFragment_to_selectTypeFragment, bundle)\r\n            }\r\n            else {\r\n                val bundle=Bundle()\r\n                bundle.putString(\"imagePath\",imageFile.absolutePath)\r\n                bundle.putString(\"photoType\",\"Parent\")                          //Enter the photoType here\r\n                view?.findNavController()?.navigate(R.id.action_captureImageFragment_to_generateCardFragment,bundle)\r\n            }\r\n        }\r\n        catch(e:Exception)\r\n        {Log.d(\"div\",\"CaptureImageFragment L538 $e\")}\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                activity?.onBackPressed()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n}*/\r\n\r\nclass CaptureImageFragment : Fragment() {\r\n    private lateinit var binding: FragmentCaptureImageBinding\r\n\r\n    private val FLASH_OFF=0\r\n    private val FLASH_ON=1\r\n    private val FLASH_AUTO=2\r\n    private var cameraFacing=true           //true for back and false for front\r\n    private var flashMode=0\r\n\r\n    private val FOLDER_NAME=\"UpToddCards\"\r\n    private val DEFAULT_CARD_CATEGORY=\"Parent\"                   //Enter the photoType here if the previous page was not home page\r\n\r\n    private var cameraPermissinGranted: Boolean = false\r\n    private var storagePermissinGranted: Boolean = false\r\n\r\n    private val STORAGE_PERMISSION_REQUEST_CODE = 0\r\n    private val CAMERA_PERMISSION_REQUEST_CODE = 1\r\n\r\n    private var previousActivity: String? = \"Home\"              //Enter the previous activity here and get it through intent also\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_capture_image, container, false)\r\n        binding.lifecycleOwner = this\r\n\r\n        (activity as AppCompatActivity?)?.supportActionBar?.title = \"Capture Moments\"\r\n        (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);\r\n        setHasOptionsMenu(true)\r\n\r\n        binding.cameraView!!.mode= Mode.PICTURE\r\n\r\n        binding.cameraView!!.setLifecycleOwner(viewLifecycleOwner)\r\n\r\n        checkFlashPresent()\r\n        checkFrontCameraPresent()\r\n\r\n        cameraPermissinGranted = hasCameraPermission()\r\n        storagePermissinGranted = hasStoragePermission()\r\n\r\n        if (cameraPermissinGranted && storagePermissinGranted) {\r\n\r\n            val intent = activity?.intent\r\n            previousActivity = intent!!.getStringExtra(\"Previous activity\")\r\n\r\n\r\n            binding.imageButtonFlipCamera.setOnClickListener { onClickFlipCamera() }\r\n            binding.buttonCapture.setOnClickListener { onClickCapture() }\r\n            binding.imageButtonFlash.setOnClickListener { onClickFlash() }\r\n            binding.imageButtonGallery.setOnClickListener { onClickGallery() }\r\n            activity?.window?.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\r\n\r\n        } else {\r\n            Toast.makeText(activity, \"Permission denied\", Toast.LENGTH_LONG).show()\r\n            activity?.fragmentManager?.popBackStack();\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n\r\n    private fun hasStoragePermission(): Boolean {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if (checkSelfPermission(requireActivity(),\r\n                    Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                requestPermissions(arrayOf<String>(Manifest.permission.WRITE_EXTERNAL_STORAGE),\r\n                    STORAGE_PERMISSION_REQUEST_CODE)\r\n                return storagePermissinGranted;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    private fun hasCameraPermission(): Boolean {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if (checkSelfPermission(requireActivity(),\r\n                    Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                requestPermissions(arrayOf<String>(Manifest.permission.CAMERA),\r\n                    CAMERA_PERMISSION_REQUEST_CODE)\r\n                return cameraPermissinGranted;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (grantResults.size > 1\r\n            && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            if (requestCode == CAMERA_PERMISSION_REQUEST_CODE)\r\n                cameraPermissinGranted = true\r\n            if (requestCode == STORAGE_PERMISSION_REQUEST_CODE)\r\n                storagePermissinGranted = true\r\n        }\r\n    }\r\n\r\n    private fun onClickGallery()\r\n    {\r\n        val pickPhoto = Intent(Intent.ACTION_PICK, Images.Media.EXTERNAL_CONTENT_URI)\r\n        startActivityForResult(pickPhoto, 1)\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        //super.onActivityResult(requestCode, resultCode, data)\r\n        if (resultCode == RESULT_OK && data != null && data.data!=null) {\r\n            val selectedImage = data.data\r\n            val bitmap:Bitmap = MediaStore.Images.Media.getBitmap(activity?.contentResolver, selectedImage)\r\n            saveToFile(bitmap)\r\n        }\r\n        else\r\n            Toast.makeText(activity,\"Failed to choose image\",Toast.LENGTH_LONG)\r\n    }\r\n\r\n    private fun saveToFile(bitmap:Bitmap)\r\n    {\r\n        var imageFile: File? = null\r\n        try {\r\n            val state: String = Environment.getExternalStorageState()\r\n            var folder: File? = null\r\n            folder = File(requireActivity().getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString() + \"/$FOLDER_NAME\")\r\n            var success = true\r\n            if (!folder.exists()) {\r\n                success = folder.mkdirs()\r\n            }\r\n            if (success) {\r\n                val date = Date()\r\n                imageFile = File(\r\n                    folder.absolutePath + File.separator + Timestamp(date.time).toString().toString() + \"Image.jpg\")\r\n                imageFile.createNewFile()\r\n            } else {\r\n                Toast.makeText(activity, \"Image Not saved\", Toast.LENGTH_SHORT).show()\r\n                return\r\n            }\r\n            val ostream = ByteArrayOutputStream()\r\n\r\n            bitmap.compress(CompressFormat.JPEG, 100, ostream)\r\n            val fout = FileOutputStream(imageFile)\r\n            fout.write(ostream.toByteArray())\r\n            fout.close()\r\n            val values = ContentValues()\r\n            values.put(Images.Media.DATE_TAKEN, System.currentTimeMillis())\r\n            values.put(Images.Media.MIME_TYPE, \"image/jpeg\")\r\n            values.put(MediaStore.MediaColumns.DATA, imageFile.absolutePath)\r\n            activity?.contentResolver?.insert(Images.Media.EXTERNAL_CONTENT_URI, values)\r\n            Log.d(\"div\",\"CaptureImageFragment L536 path= ${imageFile.absolutePath}\")\r\n\r\n            navigate(imageFile.absolutePath)\r\n        }\r\n        catch(e:Exception)\r\n        {Log.d(\"div\",\"CaptureImageFragment L538 $e\")}\r\n    }\r\n\r\n    private fun onClickFlash() {\r\n        flashMode=(flashMode+1)%3\r\n        if(flashMode==FLASH_ON)\r\n        {\r\n            binding.cameraView!!.flash= Flash.ON\r\n            binding.imageButtonFlash.setImageResource(R.drawable.ic_baseline_flash_on_24)\r\n        }\r\n        else if(flashMode==FLASH_OFF)\r\n        {\r\n            binding.cameraView!!.flash= Flash.OFF\r\n            binding.imageButtonFlash.setImageResource(R.drawable.ic_baseline_flash_off_24)\r\n        }\r\n        else\r\n        {\r\n            binding.cameraView!!.flash= Flash.AUTO\r\n            binding.imageButtonFlash.setImageResource(R.drawable.ic_baseline_flash_auto_24)\r\n        }\r\n    }\r\n\r\n    private fun checkFlashPresent() {\r\n        if (activity?.baseContext?.packageManager?.hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH)!!) {\r\n            binding.imageButtonFlash.visibility = View.VISIBLE\r\n        }\r\n        else{\r\n            binding.imageButtonFlash.visibility = View.INVISIBLE\r\n        }\r\n    }\r\n\r\n    private fun checkFrontCameraPresent() {\r\n        if(activity?.baseContext?.packageManager?.hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT)!!)\r\n            binding.imageButtonFlipCamera.visibility=View.VISIBLE\r\n        else\r\n            binding.imageButtonFlipCamera.visibility=View.INVISIBLE\r\n    }\r\n\r\n    private fun onClickFlipCamera() {\r\n        cameraFacing=!cameraFacing\r\n        if(cameraFacing)\r\n        {\r\n            binding.cameraView!!.facing= Facing.BACK\r\n        }\r\n        else\r\n        {\r\n            binding.cameraView!!.facing= Facing.FRONT\r\n        }\r\n    }\r\n\r\n    private fun onClickCapture() {\r\n        binding.cameraView!!.addCameraListener(object : CameraListener() {\r\n            override fun onPictureTaken(result: PictureResult) {\r\n                // Picture was taken!\r\n                // If planning to show a Bitmap, we will take care of\r\n                // EXIF rotation and background threading for you...\r\n                //result.toBitmap(maxWidth, maxHeight, callback)\r\n\r\n                // If planning to save a file on a background thread,\r\n                // just use toFile. Ensure you have permissions.\r\n\r\n                //result.toFile(file, callback)\r\n\r\n                // Access the raw data if needed.\r\n                val data = result.data\r\n\r\n                var imageFile: File? = null\r\n                try{\r\n                    val state: String = Environment.getExternalStorageState()\r\n                    var folder: File? = null\r\n                    folder = File(requireActivity().getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString() + \"/$FOLDER_NAME\")\r\n                    var success = true\r\n                    if (!folder.exists()) {\r\n                        success = folder.mkdirs()\r\n                    }\r\n                    if (success) {\r\n                        val date = Date()\r\n                        imageFile = File(\r\n                            folder.absolutePath + File.separator + Timestamp(date.time).toString().toString() + \"Image.jpg\")\r\n                        imageFile.createNewFile()\r\n                    } else {\r\n                        Toast.makeText(activity, \"Image Not saved\", Toast.LENGTH_SHORT).show()\r\n                        return\r\n                    }\r\n\r\n                    val outputStream = FileOutputStream(imageFile.path)\r\n                    outputStream.write(data)\r\n                    outputStream.close()\r\n                    Log.d(\"div\", \"CaptureImageFragment L852 Saved\")\r\n                    navigate(imageFile.absolutePath)\r\n                } catch (e: IOException) {\r\n                    Log.d(\"div\", \"CaptureImageFragment L854 $e\")\r\n                }\r\n            }\r\n        })\r\n        binding.cameraView!!.takePicture()\r\n\r\n    }\r\n\r\n    private fun navigate(path: String)\r\n    {\r\n        if(//TODO previousActivity==\"Home\"\r\n            true ) {\r\n            val bundle=Bundle()\r\n            bundle.putString(\"imagePath\",path)\r\n\r\n            view?.findNavController()?.navigate(R.id.action_captureImageFragment_to_selectTypeFragment, bundle)\r\n        }\r\n        else {\r\n            val bundle=Bundle()\r\n            bundle.putString(\"imagePath\",path)\r\n            bundle.putString(\"photoType\",DEFAULT_CARD_CATEGORY)\r\n            view?.findNavController()?.navigate(R.id.action_captureImageFragment_to_generateCardFragment,bundle)\r\n        }\r\n    }\r\n\r\n    /*override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                activity?.onBackPressed()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/captureimage/CaptureImageFragment.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/captureimage/CaptureImageFragment.kt	(date 1606805234899)
@@ -220,8 +220,8 @@
         savedInstanceState: Bundle?
     ): View? {
 
-        (activity as AppCompatActivity?)?.supportActionBar?.title="Capture Moments"
-        (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.title="Capture Moments"
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
         setHasOptionsMenu(true)
 
         cameraPermissinGranted=hasCameraPermission()
@@ -555,9 +555,9 @@
             val state: String = Environment.getExternalStorageState()
             var folder: File? = null
             if (state.contains(Environment.MEDIA_MOUNTED)) {
-                folder = File(Environment.getExternalStorageDirectory().toString() + "/UpToddCards")
+                folder = File(requireActivity().getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString() + "/UpToddCards")
             } else {
-                folder = File(Environment.getExternalStorageDirectory().toString() + "/UpToddCards")
+                folder = File(requireActivity().getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString() + "/UpToddCards")
             }
             var success = true
             if (!folder.exists()) {
Index: app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/generatecard/GenerateCardFragment1.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.ui.capturemoments.generatecard\r\n\r\nimport android.app.Dialog\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.graphics.*\r\nimport android.graphics.drawable.BitmapDrawable\r\nimport android.graphics.drawable.Drawable\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.Environment\r\nimport android.os.Handler\r\nimport android.provider.MediaStore\r\nimport android.text.Layout\r\nimport android.text.StaticLayout\r\nimport android.text.TextPaint\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.viewpager.widget.ViewPager\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.request.target.CustomTarget\r\nimport com.bumptech.glide.request.transition.Transition\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.uptodd.uptoddapp.R\r\nimport com.uptodd.uptoddapp.database.capturemoments.generatecard.FinalCard\r\nimport com.uptodd.uptoddapp.databinding.FragmentGenerateCard1Binding\r\nimport com.uptodd.uptoddapp.utilities.AppNetworkStatus\r\nimport com.uptodd.uptoddapp.utilities.UpToddDialogs\r\nimport java.io.ByteArrayOutputStream\r\nimport java.io.File\r\nimport java.io.FileOutputStream\r\n\r\nclass GenerateCardFragment : Fragment() {\r\n\r\n    private var imagePath:String?=null\r\n    private var type:String?=null\r\n\r\n\r\n    private lateinit var binding:FragmentGenerateCard1Binding\r\n    private lateinit var viewModel:GenerateCardViewModel\r\n\r\n    private val requiredBitmapSize:Int=800\r\n    private val textSize:Float=75f\r\n    private val lineDifference=75f              //lineDifference>=textSize and lineDifference should not be too much\r\n    private val cardListMarginInDP=5f\r\n    private val cardWidthToHeightRatio=0.5625\r\n    private val paddingLeftRightText=50\r\n\r\n    private var imageBitmap: Bitmap?=null\r\n    private var rescaledBitmap: Bitmap?=null\r\n    private var roundedCornerBitmap:Bitmap?=null\r\n    //private var finalBitmap:Bitmap?=null\r\n\r\n    private lateinit var adapter: GenerateCardAdapter\r\n\r\n    var preferences: SharedPreferences? = null\r\n\r\n    private val REQUEST_CODE_SHARE=0\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        arguments?.let {\r\n            imagePath=it.getString(\"imagePath\")\r\n            type= it.getString(\"photoType\")\r\n            Log.d(\"div\", \"GenerateCardFragment L61 $imagePath $type\")\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(\r\n            inflater,\r\n            R.layout.fragment_generate_card_1,\r\n            container,\r\n            false\r\n        )\r\n        binding.lifecycleOwner = this\r\n\r\n        viewModel=ViewModelProvider(this, GenerateCardViewModelFactory(requireActivity().application,type))\r\n            .get(GenerateCardViewModel::class.java)\r\n        viewModel.imagePath = imagePath\r\n\r\n        preferences = activity?.getSharedPreferences(\"LOGIN_INFO\", Context.MODE_PRIVATE)\r\n        if(preferences!!.contains(\"uid\"))\r\n            viewModel.uid=preferences!!.getString(\"uid\",\"\")\r\n        //viewModel.type = type\r\n        //viewModel.refreshDatabase(type)\r\n        //viewModel.getFromDatabase()\r\n\r\n        (activity as AppCompatActivity?)?.supportActionBar?.title=\"Choose Card\"\r\n        (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);\r\n        setHasOptionsMenu(true)\r\n\r\n        Log.d(\"div\", \"GenerateCardFragment L66 $requiredBitmapSize \")\r\n\r\n        getImageFromStorage()\r\n        rescaleBitmap()\r\n        roundedCornersBitmap()\r\n        viewModel.cardTypeList.observe(viewLifecycleOwner, Observer {\r\n            Log.d(\"div\",\"GenerateCardFragment L111 ${viewModel.cardTypeList.value}\")\r\n            if(viewModel.cardTypeList.value==null || viewModel.cardTypeList.value!!.isEmpty())\r\n            {\r\n                viewModel.isRepositoryEmpty.value=true\r\n                loadData()\r\n            }\r\n            else\r\n                viewModel.isRepositoryEmpty.value=false\r\n            if(viewModel.cardTypeList.value!=null && !viewModel.isCardsLoaded && viewModel.cardTypeList.value!!.isNotEmpty()) {\r\n                Log.d(\"div\",\"GenerateCardFragment L101 ${viewModel.cardTypeList.value!![0]}\")\r\n                addCardsToList()\r\n                setUpViewPager(viewModel.finalCards)\r\n                viewModel.isCardsLoaded=true\r\n            }\r\n        })\r\n\r\n        setUpViewPager(emptyList<FinalCard>())\r\n\r\n\r\n        binding.buttonShare.setOnClickListener { onClickShare() }\r\n        binding.buttonSave.setOnClickListener { onClickSave() }\r\n\r\n\r\n        return binding.root\r\n    }\r\n    private fun loadData() {\r\n        if (AppNetworkStatus.getInstance(requireContext()).isOnline) {\r\n            showLoadingDialog()\r\n            viewModel.refresh()\r\n        }\r\n        else{\r\n            val snackbar= Snackbar.make(binding.layout,\"No internet connection\",Snackbar.LENGTH_LONG)\r\n                .setAction(\"RETRY\"){\r\n                    loadData()\r\n                }\r\n            snackbar.show()\r\n        }\r\n    }\r\n\r\n\r\n    private fun getImageFromStorage()\r\n    {\r\n        val imgFile = File(viewModel.imagePath!!)\r\n        if (imgFile.exists()) {\r\n            imageBitmap = BitmapFactory.decodeFile(imgFile.absolutePath)\r\n        }\r\n        else{\r\n            Toast.makeText(activity, \"Image not found in storage\", Toast.LENGTH_LONG).show()\r\n            requireActivity().finish()\r\n        }\r\n    }\r\n\r\n    private fun rescaleBitmap()\r\n    {\r\n        val largerDimension=if(imageBitmap!!.width>imageBitmap!!.height) imageBitmap!!.width else imageBitmap!!.height\r\n        val scalingFactor:Float=requiredBitmapSize.toFloat()/largerDimension.toFloat()\r\n        Log.d(\r\n            \"div\", \"GenerateCardFragment L77 ${imageBitmap!!.width} ${imageBitmap!!.height} \" +\r\n                    \"$largerDimension $scalingFactor \" +\r\n                    \"${(imageBitmap!!.width * scalingFactor).toInt()} ${(imageBitmap!!.height * scalingFactor).toInt()}\"\r\n        )\r\n\r\n        val scaledWidth: Float =imageBitmap!!.width * scalingFactor\r\n        val scaledHeight: Float = imageBitmap!!.height * scalingFactor\r\n        rescaledBitmap=Bitmap.createScaledBitmap(\r\n            imageBitmap!!,\r\n            scaledWidth.toInt(),\r\n            scaledHeight.toInt(),\r\n            false\r\n        )\r\n    }\r\n\r\n    private fun roundedCornersBitmap()\r\n    {\r\n        val rounder = Bitmap.createBitmap(rescaledBitmap!!.width,rescaledBitmap!!.height, Bitmap.Config.ARGB_8888)\r\n        val canvas = Canvas(rounder)\r\n        val paint=Paint()\r\n        canvas.drawRoundRect(RectF(0f, 0f, rescaledBitmap!!.width.toFloat(), rescaledBitmap!!.height.toFloat()), 20.0f, 20.0f,paint)\r\n        canvas.drawBitmap(rescaledBitmap!!,0f,0f,null)\r\n        rescaledBitmap=rounder\r\n    }\r\n\r\n    private fun addCardsToList()\r\n    {\r\n        for((i, imgUrl) in viewModel.cardTypeList.value!!.withIndex()) {\r\n            imgUrl.let {\r\n                var cardBitmap:Bitmap?\r\n                Glide.\r\n                with(this).\r\n                asBitmap().\r\n                load(viewModel.cardTypeList.value!![i].imageURL).\r\n                into(object : CustomTarget<Bitmap>() {\r\n                    override fun onResourceReady(\r\n                        resource: Bitmap,\r\n                        transition: Transition<in Bitmap>?\r\n                    ) {\r\n                        Log.d(\"div\", \"GenerateCardFragment L185 $resource\")\r\n                        cardBitmap = resource\r\n\r\n                        if (cardBitmap != null) {\r\n                            val canvas = Canvas(cardBitmap!!)\r\n                            rescaledBitmap?.let {\r\n                                canvas.drawBitmap(\r\n                                    it,\r\n                                    (cardBitmap!!.width - rescaledBitmap!!.width) / 2f,\r\n                                    60f,\r\n                                    null\r\n                                )\r\n                                addTextToBitmap(\r\n                                    cardBitmap!!,\r\n                                    viewModel.cardTypeList.value!![i].text.toString()\r\n                                )\r\n                            }\r\n                            val card = FinalCard(System.currentTimeMillis(), cardBitmap!!,viewModel.cardTypeList.value!![0].cardId)\r\n                            viewModel.finalCards.add(card)\r\n                            binding.viewPager.adapter!!.notifyDataSetChanged()\r\n                            Log.d(\"div\", \"GenerateCardFragment L162 ${viewModel.finalCards.size}\")\r\n                        } else {\r\n                            Toast.makeText(activity, \"Unable to load image\", Toast.LENGTH_LONG)\r\n                                .show()\r\n                        }\r\n                    }\r\n\r\n                    override fun onLoadCleared(placeholder: Drawable?) {\r\n                        Log.d(\"div\", \"GenerateCardFragment L190 $placeholder\")\r\n                    }\r\n                })\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun addTextToBitmap(cardBitmap: Bitmap, text: String)\r\n    {\r\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {\r\n            val canvas=Canvas(cardBitmap)\r\n            val textPaint = TextPaint()\r\n            textPaint.textSize = textSize\r\n            textPaint.color = Color.WHITE                          //textColor\r\n            textPaint.style = Paint.Style.FILL\r\n            val staticLayout = StaticLayout(text,  textPaint, requiredBitmapSize, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false)\r\n            canvas.translate(((canvas.width-staticLayout.width)/2).toFloat(),requiredBitmapSize.toFloat()+100)\r\n            staticLayout.draw(canvas)\r\n        }\r\n        else {\r\n            val lineText=DivideIntoLines(text)\r\n            val canvas=Canvas(cardBitmap)\r\n            val textPaint = Paint()\r\n            textPaint.textSize = textSize\r\n            textPaint.color = Color.WHITE                          //textColor\r\n            textPaint.style = Paint.Style.FILL\r\n            val bounds = Rect()\r\n            //val height: Float = textPaint.measureText(\"yY\")\r\n            //val width: Float = textPaint.measureText(text)\r\n            var y:Float= (requiredBitmapSize+100).toFloat()\r\n            for (line in lineText.split(\"\\n\")) {\r\n                textPaint.getTextBounds(lineText, 0, line.length, bounds);\r\n                val x:Float= ((cardBitmap.width-bounds.width())/2).toFloat()\r\n                Log.d(\r\n                    \"div\",\r\n                    \"GenerateCradFragment L221 ${cardBitmap.width} ${line.length} ${bounds.width()}\"\r\n                )\r\n                y+=lineDifference\r\n                canvas.drawText(line, x, y, textPaint)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun DivideIntoLines(text: String): String{\r\n        var textCopy=text\r\n        var word:String=\"\"\r\n        var finalString=\"\"\r\n        textCopy= \"$textCopy \"\r\n        var i=0\r\n        var lineLength=-1\r\n        while(i<textCopy.length)\r\n        {\r\n            if(textCopy[i]!=' ')\r\n                word += textCopy[i]\r\n            else\r\n            {\r\n                if(lineLength==-1 || lineLength+word.length<((rescaledBitmap!!.width - paddingLeftRightText*2)/40))\r\n                {\r\n                    if(lineLength==-1)lineLength=0\r\n                    finalString+=\"$word \"\r\n                    lineLength+=word.length\r\n                }\r\n                else\r\n                {\r\n                    finalString += \"\\n$word \"\r\n                    lineLength = 0\r\n                }\r\n                word=\"\"\r\n            }\r\n            i++\r\n        }\r\n        Log.d(\"div\", \"GenerateCardFragment L222 $finalString ${rescaledBitmap!!.width}\")\r\n        finalString.trim()\r\n        return finalString\r\n    }\r\n\r\n    private fun onClickSave() {\r\n        Log.d(\"div\", \"GenerateCardFragment L292 ${adapter.getCardId()}\")\r\n        val finalCard=viewModel.getBitmapById(adapter.getCardId())\r\n        val finalBitmap=finalCard.finalCard\r\n        if(finalBitmap!=null) {\r\n            if (AppNetworkStatus.getInstance(requireContext()).isOnline) {\r\n                viewModel.isSavingToDatabase.value=true\r\n                viewModel.isCardSavedToDatabase=false\r\n                showUploadingDialog()\r\n                val file=saveFileToLocalCache(finalBitmap)\r\n                if(file!=null && file.exists() && viewModel.isSavedToLocal) {\r\n                    viewModel.saveFinalCardToDatabase(finalCard, type!!, imagePath)\r\n                    viewModel.isSavingToDatabase.observe(viewLifecycleOwner, Observer {\r\n                        if (!it) {\r\n                            if (viewModel.isCardSavedToDatabase) {\r\n                                saveFileToLocal(finalBitmap)\r\n                            } else {\r\n                                Toast.makeText(activity,\r\n                                    \"Error saving to database\",\r\n                                    Toast.LENGTH_LONG)\r\n                                    .show()\r\n                            }\r\n                        }\r\n                        file.delete()\r\n                    })\r\n                }\r\n                else\r\n                    Toast.makeText(activity, \"Error caching image\", Toast.LENGTH_LONG).show()\r\n            } else {\r\n                //showInternetNotConnectedDialog()\r\n                Snackbar.make(binding.layout,\"No internet connection\",Snackbar.LENGTH_LONG)\r\n                    .setAction(\"RETRY\"){\r\n                        onClickSave()\r\n                    }.show()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun saveFileToLocalCache(finalBitmap: Bitmap?): File? {\r\n        try{\r\n            /*var imageFile: File? = null\r\n            val state: String = Environment.getExternalStorageState()\r\n            var folder: File? = null\r\n            folder = File(requireContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString() + \"/UpToddCards\")\r\n            var success = true\r\n            if (!folder.exists()) {\r\n                success = folder.mkdirs()\r\n            }\r\n            if (success) {\r\n                imageFile = File(folder.absolutePath+File.separator+\"CachedImage\")             //overwrite to capturedImage in CaptureImageFragment\r\n                imageFile.createNewFile()\r\n            } else {\r\n                Toast.makeText(activity, \"Image Not saved\", Toast.LENGTH_SHORT).show()\r\n                return null\r\n            }\r\n            val ostream = ByteArrayOutputStream()\r\n\r\n            finalBitmap!!.compress(Bitmap.CompressFormat.JPEG, 100, ostream)\r\n            val fout = FileOutputStream(imageFile)\r\n            fout.write(ostream.toByteArray())\r\n            fout.close()\r\n            val values = ContentValues()\r\n            values.put(MediaStore.Images.Media.DATE_TAKEN, System.currentTimeMillis())\r\n            values.put(MediaStore.Images.Media.MIME_TYPE, \"image/jpeg\")\r\n            values.put(MediaStore.MediaColumns.DATA, imageFile.absolutePath)\r\n            activity?.contentResolver?.insert(\r\n                MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\r\n                values\r\n            )*/\r\n            val file = File(activity?.externalCacheDir, \"card.png\")\r\n            val fOut = FileOutputStream(file)\r\n            finalBitmap!!.compress(Bitmap.CompressFormat.PNG, 100, fOut)\r\n            fOut.flush()\r\n            fOut.close()\r\n            //file.setReadable(true, false)\r\n            viewModel.isSavedToLocal=true\r\n            return file\r\n\r\n        } catch (e: Exception) {\r\n            Log.d(\"div\", \"GenerateCardFragment L358 $e\")\r\n            return null\r\n        }\r\n    }\r\n\r\n    private fun saveFileToLocal(finalBitmap: Bitmap) {\r\n        try{\r\n            var imageFile: File?\r\n            //val state: String = Environment.getExternalStorageState()\r\n            var folder: File?\r\n            folder = File(requireContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString() + \"/UpToddCards\")\r\n            var success = true\r\n            if (!folder.exists()) {\r\n                success = folder.mkdirs()\r\n            }\r\n            if (success) {\r\n                imageFile = File(imagePath!!)             //overwrite to capturedImage in CaptureImageFragment\r\n                imageFile.createNewFile()\r\n            } else {\r\n                Toast.makeText(activity, \"Image Not saved\", Toast.LENGTH_SHORT).show()\r\n                return\r\n            }\r\n            val ostream = ByteArrayOutputStream()\r\n\r\n            finalBitmap.compress(Bitmap.CompressFormat.JPEG, 100, ostream)\r\n            val fout = FileOutputStream(imageFile)\r\n            fout.write(ostream.toByteArray())\r\n            fout.close()\r\n            val values = ContentValues()\r\n            values.put(MediaStore.Images.Media.DATE_TAKEN, System.currentTimeMillis())\r\n            values.put(MediaStore.Images.Media.MIME_TYPE, \"image/jpeg\")\r\n            values.put(MediaStore.MediaColumns.DATA, imageFile.absolutePath)\r\n            activity?.contentResolver?.insert(\r\n                MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\r\n                values\r\n            )\r\n            //Toast.makeText(activity, \"Saved\", Toast.LENGTH_LONG).show()\r\n            UpToddDialogs(requireContext()).showDialog(R.drawable.gif_done,\r\n                \"Card saved to database and local storage\",\"Close\",\r\n                object :UpToddDialogs.UpToddDialogListener{\r\n                    override fun onDialogButtonClicked(dialog: Dialog) {\r\n                        dialog.dismiss()\r\n                    }\r\n                })\r\n            viewModel.isSavedToLocal=true\r\n\r\n        } catch (e: Exception) {\r\n            Log.d(\"div\", \"GenerateCardFragment L408 $e\")\r\n        }\r\n    }\r\n\r\n    private fun onClickShare() {\r\n        val finalBitmap=viewModel.getBitmapById(adapter.getCardId()).finalCard\r\n        if(finalBitmap!=null) {\r\n            try {\r\n                val file = saveFileToLocalCache(finalBitmap)\r\n                val intent = Intent(Intent.ACTION_SEND)\r\n                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n                intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file))\r\n                intent.type = \"image/png\"\r\n                startActivity(Intent.createChooser(intent, \"Share image via\"))\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        else{\r\n            Toast.makeText(activity, \"Wait! Card not ready\", Toast.LENGTH_LONG).show()\r\n        }\r\n    }\r\n\r\n    private fun formatViewPager(viewPager: ViewPager)\r\n    {\r\n        viewPager.clipToPadding=false\r\n        viewPager.pageMargin=50\r\n        viewPager.setPadding(100, 0, 100, 0)\r\n        val nextItemVisiblePx = 50\r\n        val currentItemHorizontalMarginPx = 50\r\n        val pageTranslationX = nextItemVisiblePx + currentItemHorizontalMarginPx\r\n        val pageTransformer = ViewPager.PageTransformer { page: View, position: Float ->\r\n            page.translationX = -pageTranslationX * position\r\n            // Next line scales the item's height. You can remove it if you don't want this effect\r\n            page.scaleY = 1 - (0.25f * Math.abs(position))\r\n            // If you want a fading effect uncomment the next line:\r\n            page.alpha = 0.75f + (1 - Math.abs(position))\r\n        }\r\n        viewPager.setPageTransformer(true, pageTransformer)\r\n\r\n        //val itemDecoration = HorizontalMarginItemDecoration(requireContext(),50)\r\n        //viewPager.addItemDecoration(itemDecoration)\r\n\r\n    }\r\n\r\n    private fun setUpViewPager(list:List<FinalCard>)\r\n    {\r\n        adapter= GenerateCardAdapter(list, this.requireContext())\r\n        binding.viewPager.adapter=adapter\r\n        formatViewPager(binding.viewPager)\r\n        onPageChangeListener()\r\n        Log.d(\"div\", \"GenerateCardFragment L311 ViewPager set up\")\r\n    }\r\n\r\n    private fun onPageChangeListener()\r\n    {\r\n        binding.viewPager.setOnPageChangeListener(object : ViewPager.OnPageChangeListener {\r\n            override fun onPageScrolled(\r\n                position: Int,\r\n                positionOffset: Float,\r\n                positionOffsetPixels: Int\r\n            ) {\r\n                if (position < viewModel.finalCards.size)\r\n                    setLayoutBackground()\r\n            }\r\n\r\n            override fun onPageSelected(position: Int) {\r\n                adapter.setCardId(position)\r\n            }\r\n\r\n            override fun onPageScrollStateChanged(state: Int) {}\r\n        })\r\n    }\r\n\r\n    private fun setLayoutBackground() {\r\n        val drawable: Drawable = BitmapDrawable(resources, imageBitmap)\r\n        binding.viewPager.background=drawable\r\n        binding.viewPager.background.alpha=100\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                activity?.onBackPressed()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    private fun showInternetNotConnectedDialog() {\r\n        val upToddDialogs = UpToddDialogs(requireContext())\r\n        upToddDialogs.showDialog(R.drawable.gif_upload,\r\n            \"Network not connected\",\r\n            \"Back\",\r\n            object : UpToddDialogs.UpToddDialogListener {\r\n                override fun onDialogButtonClicked(dialog: Dialog) {\r\n                    dialog.dismiss()\r\n                }\r\n            })\r\n    }\r\n    private fun showUploadingDialog() {\r\n        val upToddDialogs = UpToddDialogs(requireContext())\r\n        upToddDialogs.showDialog(R.drawable.gif_upload,\r\n            \"Loading, please wait\",\r\n            \"Back\",\r\n            object : UpToddDialogs.UpToddDialogListener {\r\n                override fun onDialogButtonClicked(dialog: Dialog) {\r\n                    dialog.dismiss()\r\n                    findNavController().navigateUp()\r\n                }\r\n            })\r\n        viewModel.isSavingToDatabase.observe(viewLifecycleOwner, Observer {\r\n            if(!it)\r\n            {\r\n                upToddDialogs.dismissDialog()\r\n            }\r\n        })\r\n        val handler= Handler()\r\n        handler.postDelayed(Runnable{\r\n            upToddDialogs.dismissDialog()\r\n        },R.string.loadingDuarationInMillis.toLong())\r\n\r\n    }\r\n\r\n    private fun showLoadingDialog() {\r\n        val upToddDialogs = UpToddDialogs(requireContext())\r\n        upToddDialogs.showDialog(R.drawable.gif_loading,\r\n            \"Loading, please wait\",\r\n            \"Back\",\r\n            object : UpToddDialogs.UpToddDialogListener {\r\n                override fun onDialogButtonClicked(dialog: Dialog) {\r\n                    dialog.dismiss()\r\n                    findNavController().navigateUp()\r\n                }\r\n            })\r\n        viewModel.isRepositoryEmpty.observe(viewLifecycleOwner, Observer {\r\n            if (!it) {\r\n                upToddDialogs.dismissDialog()\r\n            }\r\n        })\r\n        val handler= Handler()\r\n        handler.postDelayed(Runnable {\r\n            upToddDialogs.dismissDialog()\r\n        }, R.string.loadingDuarationInMillis.toLong())\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/generatecard/GenerateCardFragment1.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/generatecard/GenerateCardFragment1.kt	(date 1606805344203)
@@ -94,12 +94,18 @@
             .get(GenerateCardViewModel::class.java)
         viewModel.imagePath = imagePath
 
+<<<<<<< HEAD
         preferences = activity?.getSharedPreferences("LOGIN_INFO", Context.MODE_PRIVATE)
         if(preferences!!.contains("uid"))
             viewModel.uid=preferences!!.getString("uid","")
         //viewModel.type = type
         //viewModel.refreshDatabase(type)
         //viewModel.getFromDatabase()
+=======
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.title="Choose Card"
+        (requireActivity() as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
+        setHasOptionsMenu(true)
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
 
         (activity as AppCompatActivity?)?.supportActionBar?.title="Choose Card"
         (activity as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
@@ -317,6 +323,7 @@
         val finalCard=viewModel.getBitmapById(adapter.getCardId())
         val finalBitmap=finalCard.finalCard
         if(finalBitmap!=null) {
+<<<<<<< HEAD
             if (AppNetworkStatus.getInstance(requireContext()).isOnline) {
                 viewModel.isSavingToDatabase.value=true
                 viewModel.isCardSavedToDatabase=false
@@ -337,6 +344,29 @@
                         }
                         file.delete()
                     })
+=======
+            var imageFile: File? = null
+            try {
+                val state: String = Environment.getExternalStorageState()
+                val folder: File = File(requireContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString() + "/UpToddCards/")
+//                if (state.contains(Environment.MEDIA_MOUNTED)) {
+//                    folder =
+//                        File(Environment.getExternalStorageDirectory().toString() + "/UpToddCards")
+//                } else {
+//                    folder =
+//                        File(Environment.getExternalStorageDirectory().toString() + "/UpToddCards")
+//                }
+                var success = true
+                if (!folder.exists()) {
+                    success = folder.mkdirs()
+                }
+                if (success) {
+                    imageFile = File(imagePath)             //overwrite to capturedImage in CaptureImageFragment
+                    imageFile.createNewFile()
+                } else {
+                    Toast.makeText(activity, "Image Not saved", Toast.LENGTH_SHORT).show()
+                    return
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
                 }
                 else
                     Toast.makeText(activity, "Error caching image", Toast.LENGTH_LONG).show()
@@ -446,7 +476,16 @@
         val finalBitmap=viewModel.getBitmapById(adapter.getCardId()).finalCard
         if(finalBitmap!=null) {
             try {
+<<<<<<< HEAD
                 val file = saveFileToLocalCache(finalBitmap)
+=======
+                val file = File(requireContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES), "devofandroid.png")
+                val fOut = FileOutputStream(file)
+                finalBitmap.compress(Bitmap.CompressFormat.PNG, 100, fOut)
+                fOut.flush()
+                fOut.close()
+                file.setReadable(true, false);
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
                 val intent = Intent(Intent.ACTION_SEND)
                 intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
                 intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file))
Index: app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/generatecard/GenerateCardViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.ui.capturemoments.generatecard\r\n\r\nimport android.app.Application\r\nimport android.util.Log\r\nimport androidx.lifecycle.AndroidViewModel\r\nimport androidx.lifecycle.MutableLiveData\r\nimport com.androidnetworking.AndroidNetworking\r\nimport com.androidnetworking.common.Priority\r\nimport com.androidnetworking.error.ANError\r\nimport com.androidnetworking.interfaces.JSONObjectRequestListener\r\nimport com.uptodd.uptoddapp.database.capturemoments.generatecard.FinalCard\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.Job\r\nimport kotlinx.coroutines.launch\r\nimport org.json.JSONObject\r\nimport java.io.File\r\n\r\n\r\nclass GenerateCardViewModel(application: Application, val type: String?) : AndroidViewModel(\r\n    application)\r\n{\r\n\r\n    var uid: String?=null\r\n    var imagePath:String?=null\r\n\r\n    /*val card1=Card(1,\"http://mars.jpl.nasa.gov/msl-raw-images/msss/01000/mcam/1000MR0044631240503684E03_DXXX.jpg\",\"sdhhjcvsjhvsdjhd kj bdsbiu bk j gd sdhhjcvsjhvsdjhd kj bdsbiu bk j gd\")\r\n    val card2=Card(2,\"http://www.linkpicture.com/q/frame_1.jpg\",\" lhifgd k g fekjg jkvuyr fwe lhifgd k g fekjg jkvuyr fwe\")\r\n    val card3=Card(3,\"http://mars.jpl.nasa.gov/msl-raw-images/msss/01000/mcam/1000MR0044631170503677E03_DXXX.jpg\",\"ejf bjhvmdns jkvq efbbdf m ejf bjhvmdns jkvq efbbdf m\")\r\n    val card4=Card(4,\"http://mars.jpl.nasa.gov/msl-raw-images/msss/01000/mcam/1000ML0044631120305209E02_DXXX.jpg\",\"lk bkebdk kjg kjv  biebb k bkebdk kjg kjv  biebb\")\r\n    val card5=Card(4,\"https://www.linkpicture.com/q/card_3.png\",\"“Being a family means you are a part of something very wonderful. It means you will love and be loved for the rest of your life.”\")\r\n\r\n    var cardTypeList= listOf<Card>(card1,card2,card3,card4,card5)*/\r\n\r\n\r\n    private val viewModelJob= Job()\r\n    private val viewModelScope= CoroutineScope(viewModelJob + Dispatchers.Main)\r\n\r\n    private val database= com.uptodd.uptoddapp.database.capturemoments.generatecard.getDatabase(\r\n        application)\r\n    private val cardsRepository=CardsRepository(database)\r\n\r\n    var isRepositoryEmpty=MutableLiveData<Boolean>()\r\n\r\n    var isCardsLoaded:Boolean=false\r\n\r\n    init {\r\n        Log.d(\"div\", \"GenerateCardViewModel L37 $type\")\r\n        viewModelScope.launch {\r\n            cardsRepository.refreshCards(type)\r\n        }\r\n    }\r\n\r\n    fun refresh()\r\n    {\r\n        viewModelScope.launch {\r\n            cardsRepository.refreshCards(type)\r\n        }\r\n    }\r\n\r\n    val cardTypeList=cardsRepository.getCardsByCategoryKey(type)\r\n\r\n    override fun onCleared() {\r\n        super.onCleared()\r\n        viewModelJob.cancel()\r\n    }\r\n\r\n\r\n\r\n\r\n    val finalCards=mutableListOf<FinalCard>()\r\n    val selectedCard:MutableLiveData<Int> = MutableLiveData(0)\r\n\r\n    fun getBitmapById(cardId: Long):FinalCard\r\n    {\r\n        val list:ArrayList<FinalCard> = finalCards as ArrayList<FinalCard>\r\n        for(card in finalCards)\r\n        {\r\n            if(card.cardId==cardId)\r\n                return card\r\n\r\n        }\r\n        return finalCards[0]\r\n    }\r\n\r\n    var isSavingToDatabase=MutableLiveData<Boolean>()\r\n    var isCardSavedToDatabase:Boolean=false\r\n    var isSavedToLocal:Boolean=false\r\n    fun saveFinalCardToDatabase(finalCard: FinalCard, type: String, imagePath: String?) {\r\n        val bitmapFile= File(imagePath)\r\n        AndroidNetworking.upload(\"https://uptodd.com/api/generatecard\")\r\n            .addMultipartFile(\"generatedCard\", bitmapFile)\r\n            .addMultipartParameter(\"frameId\", finalCard.finalCardFrameId.toString())\r\n            .addMultipartParameter(\"category\", type)\r\n            .addMultipartParameter(\"userId\", uid)\r\n            .setPriority(Priority.HIGH)\r\n            .build()\r\n            .setUploadProgressListener { bytesUploaded, totalBytes ->\r\n                // do anything with progress\r\n            }\r\n            .getAsJSONObject(object : JSONObjectRequestListener {\r\n                override fun onResponse(response: JSONObject) {\r\n                    // do anything with response\r\n                    Log.d(\"div\",\"GenerateCardViewModel L94 $response\")\r\n                    if(response.get(\"status\")!=null && response.get(\"status\")==\"Success\")\r\n                        isCardSavedToDatabase=true\r\n                    isSavingToDatabase.value=false\r\n                }\r\n\r\n                override fun onError(error: ANError?) {\r\n                    isSavingToDatabase.value=false\r\n                    Log.d(\"div\", \"AccountViewModel L67 ${error}\")\r\n                    if (error!!.getErrorCode() != 0) {\r\n                        Log.d(\"div\", \"onError errorCode : \" + error.getErrorCode());\r\n                        Log.d(\"div\", \"onError errorBody : \" + error.getErrorBody());\r\n                        Log.d(\"div\", \"onError errorDetail : \" + error.getErrorDetail());\r\n                    } else {\r\n                        // error.getErrorDetail() : connectionError, parseError, requestCancelledError\r\n                        Log.d(\"div\", \"onError errorDetail : \" + error.getErrorDetail());\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/generatecard/GenerateCardViewModel.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/ui/capturemoments/generatecard/GenerateCardViewModel.kt	(date 1606805346067)
@@ -71,7 +71,11 @@
     val finalCards=mutableListOf<FinalCard>()
     val selectedCard:MutableLiveData<Int> = MutableLiveData(0)
 
+<<<<<<< HEAD
     fun getBitmapById(cardId: Long):FinalCard
+=======
+    fun getBitmapById(cardId:Long):Bitmap?
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
     {
         val list:ArrayList<FinalCard> = finalCards as ArrayList<FinalCard>
         for(card in finalCards)
Index: app/src/main/java/com/uptodd/uptoddapp/utilities/UpToddMediaPlayer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.utilities\r\n\r\nimport android.media.MediaPlayer\r\nimport com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification\r\nimport com.uptodd.uptoddapp.database.media.music.MusicFile\r\n\r\nclass UpToddMediaPlayer {\r\n    private var mediaPlayerListener: MediaPlayerListener? = null\r\n\r\n    companion object{\r\n        val mediaPlayer: MediaPlayer = MediaPlayer()\r\n        var songPlaying: MusicFile = MusicFile()\r\n        var songIndex: Int = -1\r\n        var isPlaying = false\r\n        var timer: Long? = null\r\n        private var mediaPlaylist: ArrayList<MusicFile> = ArrayList()\r\n    }\r\n\r\n    fun setSource(song: MusicFile) {\r\n        if(mediaPlayer.isPlaying) {\r\n            mediaPlayer.stop()\r\n            isPlaying =false\r\n        }\r\n        mediaPlayer.reset()\r\n        mediaPlayer.setDataSource(song.url)\r\n        Thread{\r\n            mediaPlayer.prepare()\r\n            mediaPlayer.setOnPreparedListener {\r\n                playPause()\r\n            }\r\n        }.start()\r\n        songPlaying = song\r\n        mediaPlayerListener?.onReset(song)\r\n    }\r\n\r\n    fun setPlaylist(playlist: ArrayList<MusicFile>, indexOf: Int) {\r\n        mediaPlaylist = playlist\r\n        songIndex = indexOf\r\n    }\r\n\r\n    fun stop(){\r\n        mediaPlayer.stop()\r\n        isPlaying = false\r\n        mediaPlayerListener?.onPause()\r\n    }\r\n\r\n    //fun to play or pause music\r\n    fun playPause(){\r\n        if (mediaPlayer.isPlaying) {\r\n            mediaPlayer.pause()\r\n            isPlaying = false\r\n            mediaPlayerListener?.onPause()\r\n        } else {\r\n            mediaPlayer.start()\r\n            mediaPlayer.setOnCompletionListener {\r\n                if(songIndex < mediaPlaylist.size -1){\r\n                    setSource(mediaPlaylist[songIndex +1])\r\n                    songIndex +=1\r\n                }\r\n                else {\r\n                    if (timer == null) {\r\n                        isPlaying = false\r\n                        UptoddNotification.dismiss(notificationId = 150)\r\n                        mediaPlayerListener?.onComplete()\r\n                    } else {\r\n                        mediaPlayer.seekTo(0)\r\n                        mediaPlayer.start()\r\n                    }\r\n                }\r\n            }\r\n            isPlaying = true\r\n            mediaPlayerListener?.onStartPlaying()\r\n        }\r\n    }\r\n\r\n    fun replay(){\r\n        mediaPlayer.seekTo(0)\r\n        mediaPlayer.setOnCompletionListener {\r\n            if(timer ==null) {\r\n                isPlaying = false\r\n                UptoddNotification.dismiss(notificationId = 150)\r\n                mediaPlayerListener?.onComplete()\r\n            }\r\n            else{\r\n                mediaPlayer.start()\r\n            }\r\n        }\r\n        isPlaying = true\r\n        mediaPlayerListener?.onStartPlaying()\r\n    }\r\n\r\n    fun setMediaPlayerListener(mediaPlayerListener: MediaPlayerListener): UpToddMediaPlayer {\r\n        this.mediaPlayerListener = mediaPlayerListener\r\n        return this\r\n    }\r\n\r\n    fun playNext() {\r\n        if(songIndex < mediaPlaylist.size -1){\r\n            setSource(mediaPlaylist[songIndex +1])\r\n            songIndex +=1\r\n        }\r\n        else{\r\n            mediaPlayer.seekTo(0)\r\n        }\r\n    }\r\n\r\n    fun playPrevious() {\r\n        if(songIndex > 0){\r\n            setSource(mediaPlaylist[songIndex -1])\r\n            songIndex -=1\r\n        }\r\n        else{\r\n            mediaPlayer.seekTo(0)\r\n        }\r\n    }\r\n\r\n    interface MediaPlayerListener{\r\n        fun onComplete()\r\n\r\n        fun onReady()\r\n\r\n        fun onReset(song: MusicFile)\r\n\r\n        fun onStartPlaying()\r\n\r\n        fun onPause()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/utilities/UpToddMediaPlayer.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/utilities/UpToddMediaPlayer.kt	(date 1606805232806)
@@ -1,7 +1,7 @@
 package com.uptodd.uptoddapp.utilities
 
 import android.media.MediaPlayer
-import com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification
+import com.uptodd.uptoddapp.alarmsAndNotifications.UptoddNotification
 import com.uptodd.uptoddapp.database.media.music.MusicFile
 
 class UpToddMediaPlayer {
Index: app/src/main/java/com/uptodd/uptoddapp/media/poem/PoemFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.media.poem\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.GridLayout\r\nimport android.widget.ImageView\r\nimport android.widget.PopupMenu\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.squareup.picasso.Picasso\r\nimport com.uptodd.uptoddapp.R\r\nimport com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification\r\nimport com.uptodd.uptoddapp.database.media.music.MusicFile\r\nimport com.uptodd.uptoddapp.databinding.PoemFragmentBinding\r\nimport com.uptodd.uptoddapp.media.player.BackgroundPlayer\r\nimport com.uptodd.uptoddapp.media.player.MediaStopReceiver\r\nimport com.uptodd.uptoddapp.utilities.Conversion\r\nimport com.uptodd.uptoddapp.utilities.UpToddMediaPlayer\r\n\r\n\r\nclass PoemFragment : Fragment() {\r\n\r\n    private lateinit var viewModel: PoemViewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val binding: PoemFragmentBinding = DataBindingUtil.inflate(\r\n            inflater,\r\n            R.layout.poem_fragment,\r\n            container,\r\n            false\r\n        )\r\n\r\n        Log.d(\"Poem fragment\", \"started\")\r\n\r\n        binding.lifecycleOwner = this\r\n        viewModel = ViewModelProvider(this).get(PoemViewModel::class.java)\r\n        binding.poemViewModel = viewModel\r\n\r\n        setTimer(binding)\r\n\r\n        if (!UpToddMediaPlayer.isPlaying) {\r\n            binding.musicPlayerLayout.visibility = View.GONE\r\n        }\r\n\r\n        initializeObservers(binding)\r\n\r\n        return binding.root\r\n    }\r\n\r\n    private fun initializeObservers(binding: PoemFragmentBinding) {\r\n\r\n        viewModel.poems.observe(viewLifecycleOwner, {\r\n            redrawList(binding.poemList, it, binding)\r\n        })\r\n\r\n\r\n\r\n        viewModel.isPlaying.observe(viewLifecycleOwner, {\r\n            if (it) {\r\n                binding.musicPlay.setImageResource(R.drawable.material_pause)\r\n                Picasso.get()\r\n                    .load(viewModel.image.value)\r\n                    .resize(\r\n                        Conversion.convertDpToPixel(64F, requireContext()),\r\n                        Conversion.convertDpToPixel(\r\n                            64F,\r\n                            requireContext()\r\n                        )\r\n                    )\r\n                    .into(binding.musicIcon)\r\n                binding.musicTitle.text = viewModel.title.value\r\n            } else {\r\n                binding.musicPlay.setImageResource(R.drawable.material_play)\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun redrawList(\r\n        poemList: GridLayout,\r\n        list: ArrayList<MusicFile>,\r\n        binding: PoemFragmentBinding\r\n    ) {\r\n        poemList.removeAllViews()\r\n        list.forEach{poem ->\r\n            val inflater = requireContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\r\n            val v = inflater.inflate(R.layout.poem_list_item, null)\r\n            val poemTitle: TextView = v.findViewById(R.id.poem_item_title)\r\n            val poemImage: ImageView = v.findViewById(R.id.poem_item_image)\r\n\r\n            poemTitle.text = poem.title\r\n\r\n            Picasso.get()\r\n                .load(poem.imageURL)\r\n                .resize(\r\n                    Conversion.convertDpToPixel(128F, requireContext()),\r\n                    Conversion.convertDpToPixel(128F, requireContext())\r\n                )\r\n                .into(poemImage)\r\n\r\n            poemImage.setOnClickListener { _ ->\r\n                viewModel.playFile(poem, list)\r\n                binding.musicTitle.text = poem.title\r\n                binding.musicPlayerLayout.visibility = View.VISIBLE\r\n                //if time is already set and the user changes music, cancel the timer\r\n                if (UpToddMediaPlayer.timer != null)\r\n                    binding.musicTimer.performClick()\r\n            }\r\n            poemImage.setOnLongClickListener { _ ->\r\n                findNavController().navigate(\r\n                    PoemFragmentDirections.actionPoemFragmentToDetails(\r\n                        \"Poem\",\r\n                        poem.musicId\r\n                    )\r\n                )\r\n                true\r\n            }\r\n            poemList.addView(v)\r\n        }\r\n    }\r\n\r\n    private fun setTimer(binding: PoemFragmentBinding) {\r\n\r\n        val dropDownMenu = PopupMenu(requireContext(), binding.musicTimer)\r\n        val menu = dropDownMenu.menu\r\n        menu.add(0, 0, 0, \"15m\")\r\n        menu.add(0, 1, 0, \"30m\")\r\n        menu.add(0, 2, 0, \"45m\")\r\n\r\n        dropDownMenu.setOnMenuItemClickListener{\r\n            when(it.itemId){\r\n                0 -> {\r\n                    if (UpToddMediaPlayer.isPlaying) {\r\n                        UpToddMediaPlayer.timer = System.currentTimeMillis() + (15 * 60 * 1000)\r\n                        UptoddNotification.setAlarm(\r\n                            requireContext(),\r\n                            UpToddMediaPlayer.timer!!,\r\n                            100,\r\n                            false,\r\n                            MediaStopReceiver::class.java\r\n                        )\r\n                        Snackbar.make(\r\n                            requireView(),\r\n                            \"Timer set for 15 minutes.\",\r\n                            Snackbar.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                    true\r\n                }\r\n                1 -> {\r\n                    if (UpToddMediaPlayer.isPlaying) {\r\n                        UpToddMediaPlayer.timer = System.currentTimeMillis() + (30 * 60 * 1000)\r\n                        UptoddNotification.setAlarm(\r\n                            requireContext(),\r\n                            UpToddMediaPlayer.timer!!,\r\n                            100,\r\n                            false,\r\n                            MediaStopReceiver::class.java\r\n                        )\r\n                        Snackbar.make(\r\n                            requireView(),\r\n                            \"Timer set for 30 minutes.\",\r\n                            Snackbar.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                    true\r\n                }\r\n                2 -> {\r\n                    if (UpToddMediaPlayer.isPlaying) {\r\n                        UpToddMediaPlayer.timer = System.currentTimeMillis() + (45 * 60 * 1000)\r\n                        UptoddNotification.setAlarm(\r\n                            requireContext(),\r\n                            UpToddMediaPlayer.timer!!,\r\n                            100,\r\n                            false,\r\n                            MediaStopReceiver::class.java\r\n                        )\r\n                        Snackbar.make(\r\n                            requireView(),\r\n                            \"Timer set for 45 minutes.\",\r\n                            Snackbar.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                    true\r\n                }\r\n                else -> false\r\n            }\r\n        }\r\n\r\n        binding.musicTimer.setOnClickListener {\r\n            //If timer is not set already\r\n            if(UpToddMediaPlayer.timer==null) {\r\n                dropDownMenu.show()\r\n            }\r\n            //Else cancel the timer\r\n            else{\r\n                UptoddNotification.cancelAlarm(requireContext(), 100, MediaStopReceiver::class.java)\r\n                UpToddMediaPlayer.timer = null\r\n                Snackbar.make(requireView(), \"Timer cancelled!\", Snackbar.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        viewModel = ViewModelProvider(this).get(PoemViewModel::class.java)\r\n\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        val intent = Intent(requireContext(), BackgroundPlayer::class.java)\r\n        intent.putExtra(\"toRun\", true)\r\n        intent.putExtra(\"musicType\", \"poem\")\r\n        requireContext().sendBroadcast(intent)\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        val supportActionBar = (requireActivity() as AppCompatActivity).supportActionBar!!\r\n        supportActionBar.setHomeButtonEnabled(true)\r\n        supportActionBar.setDisplayHomeAsUpEnabled(true)\r\n        val intent = Intent(requireContext(), BackgroundPlayer::class.java)\r\n        intent.putExtra(\"toRun\", false)\r\n        intent.putExtra(\"musicType\", \"poem\")\r\n        requireContext().sendBroadcast(intent)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/media/poem/PoemFragment.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/media/poem/PoemFragment.kt	(date 1606805232743)
@@ -19,7 +19,7 @@
 import com.google.android.material.snackbar.Snackbar
 import com.squareup.picasso.Picasso
 import com.uptodd.uptoddapp.R
-import com.uptodd.uptoddapp.alarmAndNotification.UptoddNotification
+import com.uptodd.uptoddapp.alarmsAndNotifications.UptoddNotification
 import com.uptodd.uptoddapp.database.media.music.MusicFile
 import com.uptodd.uptoddapp.databinding.PoemFragmentBinding
 import com.uptodd.uptoddapp.media.player.BackgroundPlayer
Index: app/src/main/java/com/uptodd/uptoddapp/ui/order/fullpdf/FullPdfFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uptodd.uptoddapp.ui.order.fullpdf\r\n\r\nimport android.net.Uri\r\nimport android.os.AsyncTask\r\nimport android.os.Bundle\r\nimport android.os.Environment\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.databinding.DataBindingUtil\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.uptodd.uptoddapp.OrderActivity\r\nimport com.uptodd.uptoddapp.R\r\nimport com.uptodd.uptoddapp.databinding.FragmentFullPdfBinding\r\nimport com.uptodd.uptoddapp.utilities.AppNetworkStatus\r\nimport java.io.File\r\n\r\nclass FullPdfFragment : Fragment() {\r\n\r\n    private lateinit var binding:FragmentFullPdfBinding\r\n\r\n    private var pdfPath: String?=null\r\n    private var pdfName: String?=null\r\n    private var detailsUrl:String?=null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        arguments?.let {\r\n            detailsUrl=it.getString(\"url\")\r\n            pdfName=it.getString(\"pdfName\")\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding=DataBindingUtil.inflate(layoutInflater,R.layout.fragment_full_pdf,container,false)\r\n        binding.lifecycleOwner=this\r\n\r\n        (requireActivity() as AppCompatActivity?)?.supportActionBar?.title=\"$pdfName\"\r\n        (requireActivity() as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);\r\n        setHasOptionsMenu(true)\r\n\r\n        pdfPath=  requireContext().getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS).toString() + \"/orders/\" + pdfName\r\n\r\n        if(detailsUrl!=null && pdfName!=null)\r\n        {\r\n            //loadPdf()\r\n            if(File(pdfPath).exists())\r\n                displayPdf()\r\n            else\r\n                downloadPdf()\r\n        }\r\n        else\r\n        {\r\n            Toast.makeText(activity,\"Unable to load PDF\", Toast.LENGTH_LONG).show()\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n    private fun downloadPdf()\r\n    {\r\n        if(AppNetworkStatus.getInstance(requireContext()).isOnline) {\r\n            val downloadPdf = DownloadPDF(object : DownloadPDF.AsynResponse {\r\n                override fun processFinish(output: Boolean?) {\r\n                    if (output != null && output) {\r\n                        binding.progressBar.visibility = View.INVISIBLE\r\n                        displayPdf()\r\n                    }\r\n\r\n                }\r\n            }, requireContext()).execute(detailsUrl, pdfName)\r\n\r\n            if (downloadPdf.getStatus() == AsyncTask.Status.PENDING) {\r\n                Toast.makeText(activity, \"Wait...\", Toast.LENGTH_LONG).show()\r\n            }\r\n\r\n            if (downloadPdf.getStatus() == AsyncTask.Status.RUNNING) {\r\n                binding.progressBar.visibility = View.VISIBLE\r\n            }\r\n        }\r\n        else\r\n            Snackbar.make(binding.pdfView,\"No internet connection\",Snackbar.LENGTH_LONG)\r\n                .setAction(\"RETRY\"){\r\n                    downloadPdf()\r\n                }.show()\r\n    }\r\n    private fun displayPdf() {\r\n        if(pdfPath!=null) {\r\n            val pdfUri = Uri.fromFile(File(pdfPath))\r\n            Log.d(\"div\", \"FullPdfActivity L38 $pdfUri\")\r\n            binding.pdfView.fromUri(pdfUri).load()\r\n        }\r\n        else\r\n        {\r\n            Toast.makeText(activity,\"Unable to load PDF\",Toast.LENGTH_LONG).show()\r\n        }\r\n    }\r\n\r\n    /*private fun loadPdf()\r\n    {\r\n        val url=\"http://drive.google.com/viewerng/viewer?embedded=true&url=$detailsUrl\"\r\n        if(detailsUrl!=null) {\r\n            binding.webView.settings.javaScriptEnabled=true\r\n            binding.webView.settings.builtInZoomControls=true\r\n            binding.webView.webChromeClient = object:WebChromeClient(){\r\n                override fun onProgressChanged(view: WebView?, newProgress: Int) {\r\n                    super.onProgressChanged(view, newProgress)\r\n                    if(newProgress==100)\r\n                    {\r\n                        binding.progressBar.visibility=View.GONE\r\n                    }\r\n\r\n                }\r\n            }\r\n            binding.webView.loadUrl(url)\r\n        }\r\n    }*/\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                activity?.onBackPressed()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/uptodd/uptoddapp/ui/order/fullpdf/FullPdfFragment.kt	(revision ee321edd98bacf1e48d1e120934cbbbb35f9cb20)
+++ app/src/main/java/com/uptodd/uptoddapp/ui/order/fullpdf/FullPdfFragment.kt	(date 1606805342399)
@@ -47,7 +47,11 @@
         (requireActivity() as AppCompatActivity?)?.supportActionBar?.setDisplayHomeAsUpEnabled(true);
         setHasOptionsMenu(true)
 
+<<<<<<< HEAD
         pdfPath=  requireContext().getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS).toString() + "/orders/" + pdfName
+=======
+        pdfPath= requireContext().getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS).toString() + "/orders/" + pdfName
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
 
         if(detailsUrl!=null && pdfName!=null)
         {
@@ -81,6 +85,14 @@
             if (downloadPdf.getStatus() == AsyncTask.Status.PENDING) {
                 Toast.makeText(activity, "Wait...", Toast.LENGTH_LONG).show()
             }
+<<<<<<< HEAD
+=======
+        }, requireContext()).execute(detailsUrl, pdfName)
+
+        if(downloadPdf.getStatus() == AsyncTask.Status.PENDING){
+            Toast.makeText(activity,"Wait...",Toast.LENGTH_LONG).show()
+        }
+>>>>>>> bbeab7d... 9 nov 7.20pm update from ayush.
 
             if (downloadPdf.getStatus() == AsyncTask.Status.RUNNING) {
                 binding.progressBar.visibility = View.VISIBLE
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_29-11-2020_23_00__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_29-11-2020_23_00__Default_Changelist_.xml
